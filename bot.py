# bot.py
import os, re, random
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set, Tuple

from unidecode import unidecode
from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters,
)

# ======== C·∫§U H√åNH ========
TOKEN            = os.getenv("TELEGRAM_TOKEN", "").strip()
ROUND_SECONDS    = int(os.getenv("ROUND_SECONDS", "60"))       # 60s m·ªói l∆∞·ª£t
HALFTIME_SECONDS = int(os.getenv("HALFTIME_SECONDS", "30"))    # nh·∫Øc gi·ªØa l∆∞·ª£t
MIN_WORD_LEN     = int(os.getenv("MIN_WORD_LEN", "2"))         # t·ªëi thi·ªÉu m·ªói t·ª´
EXACT_WORDS      = int(os.getenv("EXACT_WORDS", "2"))          # b·∫Øt bu·ªôc = 2 t·ª´
AUTO_BEGIN_AFTER = int(os.getenv("AUTO_BEGIN_AFTER", "60"))    # auto begin sau 60s
MIN_PLAYERS      = int(os.getenv("MIN_PLAYERS", "1"))          # >=1 l√† cho ch·∫°y

HALFTIME_HINTS = [
    "C√≤n 30 gi√¢y cu·ªëi ƒë·ªÉ b·∫°n suy nghƒ© v·ªÅ cu·ªôc ƒë·ªùi:))",
    "T·∫Øc ·∫ª ƒë·∫øn v·∫≠y sao, 30 gi√¢y cu·ªëi n√® :||",
    "30 v·∫´n ch∆∞a ph·∫£i t·∫øt, nh∆∞ng mi s·∫Øp h·∫øt gi·ªù r·ªìi. 30 gi√¢y!",
    "M·∫Øc ƒëitt r·∫∑n m√£i kh√¥ng ra? 30 gi√¢y cu·ªëi n√®!",
    "30 gi√¢y cu·ªëi n√≠ ∆°i!",
]

WRONG_REPLIES = [
    "IQ b·∫°n c·∫ßn ph·∫£i xem x√©t l·∫°i, m·ªùi ti·∫øp!!",
    "M·ªói th·∫ø c≈©ng sai, GG c≈©ng kh√¥ng c·ª©u ƒë∆∞·ª£c!",
    "Sai r·ªìi m√°, tra l·∫°i t·ª´ ƒëi·ªÉn ƒëi!",
    "T·ª´ g√¨ v·∫≠y m√°, h·ªçc l·∫°i l·ªõp 1 ƒëi!!",
    "·∫¢o ti·∫øng Vi·ªát hee.",
    "Lo·∫°i, ng∆∞·ªùi ti·∫øp theo!",
    "Ch∆∞a ti·∫øn ho√° h·∫øt √†, t·ª´ n√†y con ng∆∞·ªùi d√πng sao? Sai b√©t!!",
]

TIMEOUT_REPLY = "H·∫øt gi·ªù, m·ªùi b·∫°n ra ngo√†i ch·ªù!!"

# ======== T·ª™ ƒêI·ªÇN C·ª§C B·ªò ========
BASE_DIR   = os.path.dirname(__file__)
PHRASE_FILE = os.path.join(BASE_DIR, "data", "vi_phrases.txt")
WORD_FILE   = os.path.join(BASE_DIR, "data", "vi_words.txt")

def _read_lines(path: str) -> List[str]:
    items = []
    try:
        with open(path, "r", encoding="utf-8") as f:
            for line in f:
                s = line.strip()
                if s and not s.startswith("#"):
                    items.append(s)
    except FileNotFoundError:
        pass
    return items

def normalize(s: str) -> str:
    s = s.lower().replace("ƒë", "d")
    s = unidecode(s)
    s = re.sub(r"[^a-z0-9\s]", " ", s)
    s = re.sub(r"\s+", " ", s).strip()
    return s

PHRASES: Set[str] = set(normalize(x) for x in _read_lines(PHRASE_FILE))
WORDS:   Set[str] = set(normalize(x) for x in _read_lines(WORD_FILE))

# ======== V·∫¶N ========
_VOWEL_KEY_RE = re.compile(r"[aeiouy]+[a-z]*$")

def last_word(text: str) -> str:
    toks = normalize(text).split()
    return toks[-1] if toks else ""

def rhyme_key(syllable: str) -> str:
    base = normalize(syllable)
    m = _VOWEL_KEY_RE.search(base)
    return (m.group(0) if m else base[-2:]) if base else ""

def same_rhyme(prev_phrase: Optional[str], new_phrase: str) -> bool:
    if not prev_phrase:
        return True
    return rhyme_key(last_word(prev_phrase)) == rhyme_key(last_word(new_phrase))

def is_two_words(text: str) -> Tuple[bool, List[str]]:
    toks = normalize(text).split()
    if len(toks) != EXACT_WORDS:
        return False, toks
    if any(len(t) < MIN_WORD_LEN for t in toks):
        return False, toks
    return True, toks

def is_meaningful_two_word(text: str) -> bool:
    norm = normalize(text)
    if norm in PHRASES:
        return True
    ok, toks = is_two_words(text)
    if not ok:
        return False
    return all(t in WORDS for t in toks)

# ======== TR·∫†NG TH√ÅI ========
@dataclass
class Match:
    chat_id: int
    thread_id: Optional[int] = None
    lobby: Set[int] = field(default_factory=set)
    players: List[int] = field(default_factory=list)
    names: Dict[int, str] = field(default_factory=dict)
    active: bool = False
    turn_idx: int = 0
    current_phrase: Optional[str] = None
    halftime_job: Optional[str] = None
    timeout_job: Optional[str] = None
    autostart_job: Optional[str] = None

ROOMS: Dict[int, Match] = {}

def match_of(chat_id: int) -> Match:
    if chat_id not in ROOMS:
        ROOMS[chat_id] = Match(chat_id=chat_id)
    return ROOMS[chat_id]

# ======== TI·ªÜN √çCH G·ª¨I TIN ========
async def say(context: ContextTypes.DEFAULT_TYPE, match: Match, text: str):
    await context.bot.send_message(
        match.chat_id, text,
        message_thread_id=match.thread_id
    )

def jobname(kind: str, chat_id: int) -> str:
    return f"{kind}:{chat_id}"

async def cancel_named(context: ContextTypes.DEFAULT_TYPE, name: Optional[str]):
    if not name:
        return
    for j in context.application.job_queue.get_jobs_by_name(name):
        j.schedule_removal()

async def set_timers(context: ContextTypes.DEFAULT_TYPE, match: Match):
    await cancel_named(context, match.halftime_job)
    await cancel_named(context, match.timeout_job)

    hname = jobname("half", match.chat_id)
    tname = jobname("timeout", match.chat_id)

    context.application.job_queue.run_once(half_notify, HALFTIME_SECONDS, name=hname, data=match.chat_id)
    context.application.job_queue.run_once(deadline_kick, ROUND_SECONDS,   name=tname, data=match.chat_id)

    match.halftime_job = hname
    match.timeout_job  = tname

async def half_notify(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data
    m = ROOMS.get(chat_id)
    if not m or not m.active or not m.players:
        return
    uid = m.players[m.turn_idx]
    name = m.names.get(uid, "B·∫°n")
    await say(context, m, f"‚è≥ {name}: {random.choice(HALFTIME_HINTS)}")

async def deadline_kick(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data
    m = ROOMS.get(chat_id)
    if not m or not m.active or not m.players:
        return
    await say(context, m, f"‚è∞ {TIMEOUT_REPLY}")
    # lo·∫°i ng∆∞·ªùi ƒëang t·ªõi l∆∞·ª£t
    if m.players:
        m.players.pop(m.turn_idx)
    if len(m.players) <= 1:
        await winner(context, m)
        return
    m.turn_idx %= len(m.players)
    await announce_turn(context, m)

async def winner(context: ContextTypes.DEFAULT_TYPE, m: Match):
    await cancel_named(context, m.halftime_job)
    await cancel_named(context, m.timeout_job)
    m.active = False
    if m.players:
        champ = m.players[0]
        await say(context, m, f"üèÜ {m.names.get(champ, 'ng∆∞·ªùi ch∆°i')} l√† ng∆∞·ªùi chi·∫øn th·∫Øng! Ch√∫c m·ª´ng!")
    m.current_phrase = None

# ======== L·ªÜNH ========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Ch√†o c·∫£ nh√†! /newgame ƒë·ªÉ m·ªü s·∫£nh, /join ƒë·ªÉ tham gia. "
        "Bot s·∫Ω t·ª± b·∫Øt ƒë·∫ßu sau 1 ph√∫t n·∫øu ƒë·ªß ng∆∞·ªùi."
    )

async def do_join(update: Update, context: ContextTypes.DEFAULT_TYPE, m: Match, uid: int, name: str):
    m.lobby.add(uid)
    m.names[uid] = name
    await say(context, m, f"‚ûï {name} ƒë√£ tham gia!")

async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    m = match_of(chat.id)
    m.thread_id = update.message.message_thread_id  # ƒë·ªÉ g·ª≠i v√†o ƒë√∫ng topic
    # reset
    m.lobby.clear(); m.players.clear()
    m.active = False; m.turn_idx = 0; m.current_phrase = None
    await cancel_named(context, m.autostart_job)

    await update.message.reply_text("üéÆ S·∫£nh ƒë√£ m·ªü! G√µ /join ƒë·ªÉ tham gia. "
                                    "N·∫øu kh√¥ng ai /join th√™m, bot s·∫Ω t·ª± b·∫Øt ƒë·∫ßu sau 1 ph√∫t.")

    await do_join(update, context, m, user.id, user.full_name)

    name = jobname("autostart", chat.id)
    context.application.job_queue.run_once(auto_begin, AUTO_BEGIN_AFTER, name=name, data=chat.id)
    m.autostart_job = name

async def auto_begin(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data
    m = ROOMS.get(chat_id)
    if not m or m.active:
        return
    if len(m.lobby) >= MIN_PLAYERS:
        await begin_game(context, m)
    else:
        await say(context, m, "‚è∏Ô∏è Kh√¥ng ƒë·ªß ng∆∞·ªùi ch∆°i. /newgame ƒë·ªÉ m·ªü l·∫°i s·∫£nh.")

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = match_of(update.effective_chat.id)
    m.thread_id = update.message.message_thread_id or m.thread_id
    await do_join(update, context, m, update.effective_user.id, update.effective_user.full_name)

async def cmd_begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = match_of(update.effective_chat.id)
    m.thread_id = update.message.message_thread_id or m.thread_id
    await begin_game(context, m)

async def begin_game(context: ContextTypes.DEFAULT_TYPE, m: Match):
    if m.active:
        return
    if len(m.lobby) < max(1, MIN_PLAYERS):
        await say(context, m, "C·∫ßn th√™m ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        return
    m.players = list(m.lobby)
    random.shuffle(m.players)
    m.turn_idx = 0
    m.active = True
    m.current_phrase = None
    await say(context, m, "üöÄ B·∫Øt ƒë·∫ßu! Sai lu·∫≠t ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.")
    await announce_turn(context, m)

async def announce_turn(context: ContextTypes.DEFAULT_TYPE, m: Match):
    uid = m.players[m.turn_idx]
    name = m.names.get(uid, "B·∫°n")
    law  = f"üîÅ Lu·∫≠t: v·∫ßn ‚Ä¢ {EXACT_WORDS} t·ª´ ‚Ä¢ m·ªói t·ª´ ‚â•{MIN_WORD_LEN} k√Ω t·ª± ‚Ä¢ ph·∫£i c√≥ nghƒ©a."
    prev = f"T·ª´ tr∆∞·ªõc: {m.current_phrase}" if m.current_phrase else "‚Üí G·ª≠i c·ª•m h·ª£p l·ªá b·∫•t k·ª≥."
    await say(context, m, f"{law}\nüëâ {name} ƒë·∫øn l∆∞·ª£t. {prev}")
    await set_timers(context, m)

# ======== X·ª¨ L√ù VƒÇN B·∫¢N ========
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    chat = update.effective_chat
    user = update.effective_user
    m = ROOMS.get(chat.id)
    if not m or not m.active or not m.players:
        return
    # ch·ªâ ng∆∞·ªùi ƒëang t·ªõi l∆∞·ª£t
    if user.id != m.players[m.turn_idx]:
        return

    text = update.message.text.strip()
    ok2, _ = is_two_words(text)
    if not ok2 or not is_meaningful_two_word(text) or not same_rhyme(m.current_phrase, text):
        await update.message.reply_text(f"‚ùå {random.choice(WRONG_REPLIES)}")
        # lo·∫°i ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
        if m.players:
            m.players.pop(m.turn_idx)
        if len(m.players) <= 1:
            await winner(context, m); return
        m.turn_idx %= len(m.players)
        await announce_turn(context, m)
        return

    # h·ª£p l·ªá
    m.current_phrase = text
    await update.message.reply_text("‚úÖ H·ª£p l·ªá. T·ªõi l∆∞·ª£t k·∫ø ti·∫øp!")
    m.turn_idx = (m.turn_idx + 1) % len(m.players)
    await announce_turn(context, m)

# ======== DEBUG / PING ========
async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    # log l·ªói nh·∫π nh√†ng ƒë·ªÉ kh√¥ng ‚Äúƒë·ªè‚Äù log
    try:
        print("ERROR:", context.error)
    except Exception:
        pass

# ======== APP ========
def get_app() -> Application:
    if not TOKEN:
        raise RuntimeError("Thi·∫øu TELEGRAM_TOKEN ‚Äì th√™m ·ªü Environment c·ªßa Render.")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start",   cmd_start))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join",    cmd_join))
    app.add_handler(CommandHandler("begin",   cmd_begin))
    app.add_handler(CommandHandler("ping",    cmd_ping))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(on_error)
    return app
