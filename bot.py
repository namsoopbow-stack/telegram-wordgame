# bot.py
import os
import re
import unicodedata
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set

from telegram import Update, ChatPermissions
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ====== C·∫§U H√åNH T·ª™ BI·∫æN M√îI TR∆Ø·ªúNG ======
TOKEN = os.environ["TELEGRAM_TOKEN"]
ROUND_SECONDS = int(os.environ.get("ROUND_SECONDS", "20"))   # b·∫°n ƒë√£ ƒë·∫∑t 60
MIN_WORD_LEN   = int(os.environ.get("MIN_WORD_LEN", "3"))    # b·∫°n ƒë√£ ƒë·∫∑t 2
DEFAULT_MODE   = os.environ.get("DEFAULT_MODE", "rhyme")     # b·∫°n ƒë√£ ƒë·∫∑t rhyme

# ====== TI·ªÜN √çCH X·ª¨ L√ù ‚ÄúV·∫¶N‚Äù ======
_VOWELS = "aƒÉ√¢e√™i√Æo√¥∆°u∆∞yAƒÇ√ÇE√äI√éO√î∆†U∆ØY"

def strip_diacritics(s: str) -> str:
    nf = unicodedata.normalize("NFD", s)
    return "".join(ch for ch in nf if unicodedata.category(ch) != "Mn")

def rhyme_key(word: str) -> str:
    """
    Kh√≥a v·∫ßn ƒë∆°n gi·∫£n: l·∫•y 2 k√Ω t·ª± cu·ªëi c·ªßa t·ª´ (b·ªè d·∫•u, b·ªè kho·∫£ng tr·∫Øng).
    D√πng cho lu·∫≠t 'rhyme' ‚Äì ƒë·ªß t·ªët ƒë·ªÉ ch∆°i vui trong nh√≥m.
    """
    w = strip_diacritics(word.strip().lower())
    # t√°ch t·ª´ cu·ªëi c√πng n·∫øu l√† c·ª•m nhi·ªÅu t·ª´
    last = w.split()[-1] if w else ""
    return last[-2:] if len(last) >= 2 else last

# ====== TR·∫†NG TH√ÅI TR·∫¨N ======
@dataclass
class Match:
    mode: str = DEFAULT_MODE              # ch·ªâ d√πng 'rhyme'
    active: bool = False
    players: List[int] = field(default_factory=list)  # t·∫•t c·∫£ ng∆∞·ªùi ƒë√£ /join
    alive: List[int] = field(default_factory=list)    # ƒëang c√≤n trong v√°n
    turn_idx: int = 0
    current_word: str = ""                # t·ª´ tr∆∞·ªõc ƒë√≥
    used: Set[str] = field(default_factory=set)       # tr√°nh l·∫∑p
    timer_job_id: Optional[str] = None

# L∆∞u tr·ªØ theo chat_id
MATCHES: Dict[int, Match] = {}

def get_match(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> Match:
    if chat_id not in MATCHES:
        MATCHES[chat_id] = Match()
    return MATCHES[chat_id]

# ====== QU·∫¢N L√ù L∆Ø·ª¢T & H·∫æT GI·ªú ======
async def announce_turn(update: Update, context: ContextTypes.DEFAULT_TYPE, match: Match):
    chat_id = update.effective_chat.id
    user_id = match.alive[match.turn_idx]
    member = await context.bot.get_chat_member(chat_id, user_id)
    prefix = f"üîÅ Lu·∫≠t: v·∫ßn (t·ªëi thi·ªÉu {MIN_WORD_LEN} k√Ω t·ª±)."
    if match.current_word:
        await context.bot.send_message(
            chat_id, f"{prefix}\nüëâ {member.user.mention_html()} ƒë·∫øn l∆∞·ª£t!\n"
                     f"T·ª´ tr∆∞·ªõc: <b>{match.current_word}</b> (h√£y g·ª≠i t·ª´ c√≥ v·∫ßn gi·ªëng)",
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id, f"{prefix}\nüëâ {member.user.mention_html()} ƒëi tr∆∞·ªõc. G·ª≠i b·∫•t k·ª≥ t·ª´ h·ª£p l·ªá.",
            parse_mode=ParseMode.HTML
        )

    # ƒë·∫∑t h·∫πn gi·ªù
    await set_turn_timer(context, chat_id)

async def set_turn_timer(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    match = get_match(context, chat_id)
    # h·ªßy job c≈©
    if match.timer_job_id:
        old = context.job_queue.get_jobs_by_name(match.timer_job_id)
        for j in old: j.schedule_removal()
    # t·∫°o job m·ªõi
    job_name = f"turn_{chat_id}"
    match.timer_job_id = job_name
    context.job_queue.run_once(timeout_eliminate, when=ROUND_SECONDS, name=job_name, data={"chat_id": chat_id})

async def timeout_eliminate(ctx):
    chat_id = ctx.job.data["chat_id"]
    context: ContextTypes.DEFAULT_TYPE = ctx.application  # type: ignore
    match = get_match(context, chat_id)
    if not match.active or not match.alive:
        return
    uid = match.alive[match.turn_idx]
    member = await context.bot.get_chat_member(chat_id, uid)
    await context.bot.send_message(chat_id, f"‚è∞ H·∫øt {ROUND_SECONDS}s ‚Äì {member.user.mention_html()} b·ªã lo·∫°i!",
                                   parse_mode=ParseMode.HTML)
    # lo·∫°i & ki·ªÉm tra th·∫Øng
    match.alive.pop(match.turn_idx)
    if len(match.alive) == 1:
        winner = match.alive[0]
        win_member = await context.bot.get_chat_member(chat_id, winner)
        await context.bot.send_message(chat_id, f"üèÜ {win_member.user.full_name} th·∫Øng! üéâ")
        match.active = False
        match.timer_job_id = None
        return
    match.turn_idx %= len(match.alive)
    await announce_turn(await context.bot.get_chat(chat_id), context, match)  # type: ignore

# ====== COMMANDS C∆† B·∫¢N ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ Bot ƒë·ªëi ch·ªØ ƒë√£ s·∫µn s√†ng!\n"
                                    "L·ªánh: /newgame, /join, /begin, /stop\n"
                                    f"Lu·∫≠t: v·∫ßn ‚Ä¢ l∆∞·ª£t: {ROUND_SECONDS}s ‚Ä¢ t·ªëi thi·ªÉu {MIN_WORD_LEN} k√Ω t·ª±")

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong ‚úÖ")

async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    MATCHES[chat_id] = Match()  # reset
    await update.message.reply_text("üß© T·∫°o s·∫£nh m·ªõi. M·ªçi ng∆∞·ªùi d√πng /join ƒë·ªÉ tham gia.")

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    match = get_match(context, chat_id)
    if match.active:
        await update.message.reply_text("V√°n ƒëang ch·∫°y, ƒë·ª£i v√°n sau nh√©.")
        return
    if user_id in match.players:
        await update.message.reply_text("B·∫°n ƒë√£ tham gia r·ªìi!")
        return
    match.players.append(user_id)
    await update.message.reply_text(f"‚úÖ {update.effective_user.full_name} ƒë√£ tham gia. "
                                    f"Hi·ªán c√≥ {len(match.players)} ng∆∞·ªùi.")

async def cmd_begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    match = get_match(context, chat_id)
    if match.active:
        await update.message.reply_text("V√°n ƒëang ch·∫°y r·ªìi.")
        return
    if len(match.players) < 2:
        await update.message.reply_text("C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi /join m·ªõi b·∫Øt ƒë·∫ßu ƒë∆∞·ª£c.")
        return
    match.active = True
    match.alive = list(match.players)
    match.turn_idx = 0
    match.current_word = ""
    match.used.clear()
    await update.message.reply_text("üöÄ B·∫Øt ƒë·∫ßu! Lo·∫°i tr·ª±c ti·∫øp: sai ho·∫∑c h·∫øt gi·ªù l√† r·ªùi b√†n.")
    await announce_turn(update, context, match)

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    match = get_match(context, chat_id)
    match.active = False
    match.timer_job_id = None
    await update.message.reply_text("‚èπÔ∏è ƒê√£ k·∫øt th√∫c v√°n hi·ªán t·∫°i.")

# ====== X·ª¨ L√ù TIN NH·∫ÆN NG∆Ø·ªúI CH∆†I ======
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    text = update.message.text.strip()

    match = get_match(context, chat_id)
    if not match.active or not match.alive:
        return  # b·ªè qua khi ch∆∞a ch∆°i

    # ch·ªâ ng∆∞·ªùi ƒë·∫øn l∆∞·ª£t ƒë∆∞·ª£c n√≥i
    if user_id != match.alive[match.turn_idx]:
        return

    # ki·ªÉm tra t·ªëi thi·ªÉu k√Ω t·ª±
    if len(text) < MIN_WORD_LEN:
        await update.message.reply_text(f"‚ùå T·ª´ qu√° ng·∫Øn (t·ªëi thi·ªÉu {MIN_WORD_LEN}). B·∫°n b·ªã lo·∫°i.")
        match.alive.pop(match.turn_idx)
    else:
        # lu·∫≠t rhyme
        ok = True
        if match.current_word:
            ok = rhyme_key(text) != "" and rhyme_key(text) == rhyme_key(match.current_word)
        # kh√¥ng l·∫∑p l·∫°i t·ª´ ƒë√£ d√πng (kh√¥ng b·∫Øt bu·ªôc nh∆∞ng hay h∆°n)
        key = strip_diacritics(text.lower())
        if key in match.used:
            ok = False
        if ok:
            match.used.add(key)
            match.current_word = text
            # chuy·ªÉn l∆∞·ª£t
            match.turn_idx = (match.turn_idx + 1) % len(match.alive)
            await update.message.reply_text(f"‚úÖ H·ª£p l·ªá. T·ªõi l∆∞·ª£t ng∆∞·ªùi k·∫ø ti·∫øp!")
        else:
            await update.message.reply_text("‚ùå Sai lu·∫≠t (kh√¥ng c√πng v·∫ßn ho·∫∑c l·∫∑p). B·∫°n b·ªã lo·∫°i.")
            match.alive.pop(match.turn_idx)

    # ki·ªÉm tra th·∫Øng/thua
    if len(match.alive) == 1:
        winner = match.alive[0]
        member = await context.bot.get_chat_member(chat_id, winner)
        await context.bot.send_message(chat_id, f"üèÜ {member.user.full_name} th·∫Øng! üéâ")
        match.active = False
        match.timer_job_id = None
        return

    # chuy·ªÉn l∆∞·ª£t v√† ƒë·∫∑t l·∫°i h·∫πn gi·ªù
    match.turn_idx %= len(match.alive)
    await announce_turn(update, context, match)

# ====== KH·ªûI T·∫†O APP ======
def build_application() -> Application:
    app = Application.builder().token(TOKEN).build()
    # l·ªánh
    app.add_handler(CommandHandler("start",  cmd_start))
    app.add_handler(CommandHandler("ping",   cmd_ping))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join",    cmd_join))
    app.add_handler(CommandHandler("begin",   cmd_begin))
    app.add_handler(CommandHandler("stop",    cmd_stop))
    # text
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app
