# bot.py
import os, time, re, random, json, asyncio, logging
from collections import deque

import requests
from unidecode import unidecode
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, AIORateLimiter,
    CommandHandler, MessageHandler, ContextTypes, filters
)

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("doichu")

# ================== C·∫§U H√åNH ==================
BOT_TOKEN       = os.getenv("TELEGRAM_TOKEN", "")
WAIT_SECONDS    = int(os.getenv("AUTO_START_SECONDS", "60"))     # 60s ·ªü lobby
REMIND_EVERY    = int(os.getenv("REMIND_EVERY_SECONDS", "30"))    # nh·∫Øc lobby
TURN_SECONDS    = int(os.getenv("TURN_SECONDS", "30"))            # 30s m·ªói l∆∞·ª£t

# T·ª´ ƒëi·ªÉn offline (raw URL ho·∫∑c ƒë∆∞·ªùng d·∫´n file). ∆Øu ti√™n URL.
OFFLINE_DICT_URL  = os.getenv("OFFLINE_DICT_URL", "").strip()    # v√≠ d·ª•: https://gist.githubusercontent.com/.../dict_offline.txt
OFFLINE_DICT_FILE = os.getenv("OFFLINE_DICT_FILE", "dict_vi.txt")

# Gist l∆∞u cache t·ª´ ƒë√∫ng
GIST_ID     = os.getenv("GIST_ID", "").strip()                   # v√≠ d·ª•: 212301c00d2b00247ffc786f921dc29f
GIST_FILE   = os.getenv("GIST_FILE", "dict_offline.txt")         # t√™n file trong gist
GIST_TOKEN  = os.getenv("GIST_TOKEN", "").strip()

# Wiktionary API (VN)
WIKI_API = "https://vi.wiktionary.org/w/api.php"

# C√¢u nh·∫Øc
NAGS = [
    "‚è≥ V·∫´n ch∆∞a c√≥ c√¢u √†? M·∫°nh d·∫°n l√™n!",
    "‚åõ C∆° h·ªôi kh√¥ng ch·ªù ƒë·ª£i, qu·∫•t!",
    "üïí G·∫ßn h·∫øt gi·ªù ƒë·∫•y, nhanh n√†o!",
    "üì¢ ƒêo√°n ƒëi ch·ª©! ƒê·ª´ng ƒë·ªÉ c·∫£ nh√≥m ƒë·ª£i!",
    "üò¥ Ch·∫≠m th·∫ø! T·ªânh t√°o l√™n!",
    "ü´• L·ª° nh·ªãp l√† b·ªã lo·∫°i ƒë·∫•y!",
    "üß† IQ ch·ªâ ƒë·∫øn th·∫ø th√¥i sao? Nhanh n√†o!",
    "‚ö° Mau! Th·ªùi gian bay nh∆∞ gi√≥!",
    "ü•µ ƒê·ª´ng run! B·∫Øn c√¢u n√†o!",
    "üê∑ V·∫´n ch∆∞a ra k·∫øt qu·∫£? N√£o heo √†!",
]

RIGHT_MSGS = [
    "‚úÖ ·ªîn √°p! Qua l∆∞·ª£t!",
    "‚úÖ Chu·∫©n b√†i!",
    "‚úÖ Ngon, ti·∫øp t·ª•c n√†o!",
    "‚úÖ H·ª£p l·ªá, chuy·ªÅn b√≥ng!",
]

WRONG_MSGS = [
    "‚ùå C·ª•m kh√¥ng c√≥ nghƒ©a (kh√¥ng t√¨m th·∫•y).",
    "‚ùå Kh√¥ng h·ª£p l·ªá r·ªìi!",
    "‚ùå Sai lu·∫≠t/kh√¥ng th·∫•y nghƒ©a.",
]

# L·ªánh "iu"
ONLY_PING_USER = "@yhck2"

# ================== B·ªò NH·ªö ==================
# Lobby cho m·ªói chat
LOBBY = {}  # chat_id -> {players:set[int], created, count_job, rem_job}

# Tr·∫°ng th√°i game cho m·ªói chat
GAMES = {}  # chat_id -> GameState

# B·ªô nh·ªõ t·ª´ ƒëi·ªÉn
DICT_OK = set()   # c·ª•m 2 t·ª´ c√≥ nghƒ©a (c√≥ d·∫•u), ƒë√£ bi·∫øt
DICT_BAD = set()  # t·ª´ng b·ªã tra kh√¥ng th·∫•y (ƒë·ªÉ ƒë·ª° g·ªçi online l·∫°i ngay)

# ================== TI·ªÜN √çCH T·ª™ ==================
def normalize_spaces(s: str) -> str:
    return re.sub(r"\s+", " ", (s or "").strip())

def is_two_word_phrase(s: str) -> bool:
    s = normalize_spaces(s)
    parts = s.split(" ")
    return len(parts) == 2 and all(p for p in parts)

def first_last_word(s: str):
    s = normalize_spaces(s)
    a, b = s.split(" ")
    return a, b

def both_keys(s: str):
    """T·∫°o hai key ƒë·ªÉ ƒë·ªëi chi·∫øu: b·∫£n c√≥ d·∫•u h·∫° chu·∫©n, v√† b·∫£n b·ªè d·∫•u."""
    s = normalize_spaces(s)
    return s.lower(), unidecode(s.lower())

# ================== T·ª™ ƒêI·ªÇN OFFLINE/ONLINE ==================
def load_offline_dict():
    """ƒê·ªï DICT_OK t·ª´ ngu·ªìn offline (URL raw ho·∫∑c file)."""
    seen = 0
    try:
        if OFFLINE_DICT_URL:
            r = requests.get(OFFLINE_DICT_URL, timeout=10)
            r.raise_for_status()
            lines = r.text.splitlines()
        else:
            if not os.path.exists(OFFLINE_DICT_FILE):
                log.warning("Kh√¥ng th·∫•y OFFLINE_DICT_FILE: %s", OFFLINE_DICT_FILE)
                lines = []
            else:
                with open(OFFLINE_DICT_FILE, "r", encoding="utf-8") as f:
                    lines = f.readlines()
        for ln in lines:
            w = normalize_spaces(ln)
            if is_two_word_phrase(w):
                DICT_OK.add(w.lower())
                DICT_OK.add(unidecode(w.lower()))
                seen += 1
        log.info("ƒê√£ n·∫°p %d c·ª•m t·ª´ offline.", seen)
    except Exception as e:
        log.exception("L·ªói n·∫°p offline dict: %s", e)

def save_good_to_gist(phrase: str):
    """L∆∞u c·ª•m ƒë√∫ng v√†o Gist (append, n·∫øu c·∫•u h√¨nh)."""
    if not (GIST_ID and GIST_TOKEN and GIST_FILE):
        return
    try:
        # L·∫•y gist hi·ªán t·∫°i
        gh = f"https://api.github.com/gists/{GIST_ID}"
        headers = {"Authorization": f"token {GIST_TOKEN}",
                   "Accept": "application/vnd.github+json"}
        cur = requests.get(gh, headers=headers, timeout=10).json()
        files = cur.get("files", {})
        content = files.get(GIST_FILE, {}).get("content", "")
        # Th√™m n·∫øu ch∆∞a c√≥
        new_line = phrase.strip()
        if new_line.lower() not in [ln.strip().lower() for ln in content.splitlines()]:
            content = (content + ("\n" if content and not content.endswith("\n") else "")) + new_line + "\n"
            payload = {"files": {GIST_FILE: {"content": content}}}
            requests.patch(gh, headers=headers, data=json.dumps(payload), timeout=10)
    except Exception as e:
        log.warning("Kh√¥ng th·ªÉ ghi Gist: %s", e)

def online_has_meaning(phrase: str) -> bool:
    """Tra nhanh tr√™n Wiktionary; th·∫•y trang l√† coi nh∆∞ c√≥ nghƒ©a."""
    try:
        params = {
            "action": "query",
            "format": "json",
            "titles": phrase,
            "redirects": 1,
        }
        r = requests.get(WIKI_API, params=params, timeout=8)
        r.raise_for_status()
        data = r.json()
        pages = data.get("query", {}).get("pages", {})
        # Trang t·ªìn t·∫°i c√≥ pageid != -1
        for pid, page in pages.items():
            if pid != "-1":
                return True
        return False
    except Exception as e:
        log.warning("Online check l·ªói: %s", e)
        return False

def is_valid_phrase(phrase: str) -> bool:
    """Ki·ªÉm tra h·ª£p l·ªá: 2 t·ª´ & c√≥ nghƒ©a (offline tr∆∞·ªõc, kh√¥ng c√≥ ‚Üí online). Cache k·∫øt qu·∫£."""
    phrase = normalize_spaces(phrase)
    if not is_two_word_phrase(phrase):
        return False
    key_lc, key_no = both_keys(phrase)

    # Tr√°nh spam online
    if key_lc in DICT_BAD or key_no in DICT_BAD:
        return False

    # Offline
    if key_lc in DICT_OK or key_no in DICT_OK:
        return True

    # Online
    if online_has_meaning(phrase):
        DICT_OK.add(key_lc); DICT_OK.add(key_no)
        # L∆∞u vƒ©nh vi·ªÖn
        save_good_to_gist(phrase)
        return True

    # cache x·∫•u
    DICT_BAD.add(key_lc); DICT_BAD.add(key_no)
    return False

# ================== LOBBY ==================
async def _auto_begin_job(ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = ctx.job.chat_id
    app = ctx.application
    state = LOBBY.get(chat_id)
    if not state:
        return
    # h·ªßy job nh·∫Øc
    try:
        if state.get("rem_job"): state["rem_job"].schedule_removal()
    except: ...
    players = list(state["players"])
    LOBBY.pop(chat_id, None)

    if len(players) == 0:
        await app.bot.send_message(chat_id, "‚åõ H·∫øt gi·ªù m√† ch∆∞a c√≥ ai join. ƒê√≥ng s·∫£nh!")
        return
    await _start_game(app, chat_id, players)

async def _remind_job(ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = ctx.job.chat_id
    app = ctx.application
    state = LOBBY.get(chat_id)
    if not state: return
    since = int(time.time() - state["created"])
    remain = max(0, WAIT_SECONDS - since)
    if remain <= 0: return
    msg = f"{random.choice(NAGS)}\nüï∞Ô∏è C√≤n {remain}s!"
    await app.bot.send_message(chat_id, msg)

async def newgame_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    app = context.application
    # reset lobby
    old = LOBBY.get(chat_id)
    if old:
        try:
            if old.get("count_job"): old["count_job"].schedule_removal()
            if old.get("rem_job"): old["rem_job"].schedule_removal()
        except: ...
        LOBBY.pop(chat_id, None)

    LOBBY[chat_id] = {"players": set(), "created": time.time(), "count_job": None, "rem_job": None}
    await update.effective_message.reply_text(
        "üéÆ M·ªü s·∫£nh! G√µ /join ƒë·ªÉ tham gia. üîî T·ª± b·∫Øt ƒë·∫ßu sau 60s n·∫øu c√≥ ng∆∞·ªùi tham gia."
    )
    count_job = app.job_queue.run_once(_auto_begin_job, when=WAIT_SECONDS, chat_id=chat_id)
    rem_job = app.job_queue.run_repeating(_remind_job, interval=REMIND_EVERY, first=REMIND_EVERY, chat_id=chat_id)
    LOBBY[chat_id]["count_job"] = count_job
    LOBBY[chat_id]["rem_job"]   = rem_job

async def join_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    uid = update.effective_user.id
    state = LOBBY.get(chat_id)
    if not state:
        await update.effective_message.reply_text("‚ùå Ch∆∞a c√≥ s·∫£nh. D√πng /newgame ƒë·ªÉ m·ªü.")
        return
    state["players"].add(uid)
    await update.effective_message.reply_text(
        f"‚úÖ <b>{update.effective_user.full_name}</b> ƒë√£ tham gia!", parse_mode=ParseMode.HTML
    )

async def begin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    app = context.application
    state = LOBBY.get(chat_id)
    if not state:
        await update.effective_message.reply_text("‚ùå Ch∆∞a c√≥ s·∫£nh. D√πng /newgame ƒë·ªÉ m·ªü.")
        return
    try:
        if state.get("count_job"): state["count_job"].schedule_removal()
        if state.get("rem_job"): state["rem_job"].schedule_removal()
    except: ...
    players = list(state["players"])
    LOBBY.pop(chat_id, None)
    if len(players) == 0:
        await update.effective_message.reply_text("‚åõ Ch∆∞a c√≥ ai /join. H·ªßy b·∫Øt ƒë·∫ßu.")
        return
    await _start_game(app, chat_id, players)

async def stop_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = LOBBY.pop(chat_id, None)
    if st:
        try:
            if st.get("count_job"): st["count_job"].schedule_removal()
            if st.get("rem_job"): st["rem_job"].schedule_removal()
        except: ...
        await update.effective_message.reply_text("üõë ƒê√≥ng s·∫£nh, hu·ª∑ ƒë·∫øm ng∆∞·ª£c.")
    else:
        await update.effective_message.reply_text("‚ÑπÔ∏è Kh√¥ng c√≥ s·∫£nh n√†o ƒëang m·ªü.")

# ================== GAMEPLAY ==================
class GameState:
    def __init__(self, chat_id: int, players: list[int]):
        self.chat_id = chat_id
        self.players = deque(players)  # xoay v√≤ng
        self.mode = "solo" if len(players) == 1 else "multi"
        self.current = self.players[0]
        self.last_phrase = None
        self.tail = None
        self.used = set()              # tr√°nh l·∫∑p
        self.turn_job = None

    def rotate_next(self):
        self.players.rotate(-1)
        self.current = self.players[0]

async def _start_turn(app: Application, gs: GameState):
    """B·∫Øt ƒë·∫ßu / reset b·ªô ƒë·∫øm cho 1 l∆∞·ª£t."""
    # h·ªßy job c≈©
    try:
        if gs.turn_job: gs.turn_job.schedule_removal()
    except: ...
    # ƒë·∫∑t job nh·∫Øc + timeout
    async def tick(ctx: ContextTypes.DEFAULT_TYPE):
        # nh·∫Øc ·ªü 25s -> ‚Äúc√≤n 5s‚Äù
        await app.bot.send_message(gs.chat_id, "‚è∞ C√≤n 5 gi√¢y!")

    async def timeout(ctx: ContextTypes.DEFAULT_TYPE):
        # H·∫øt gi·ªù -> lo·∫°i n·∫øu multi, k·∫øt th√∫c n·∫øu solo
        if gs.mode == "multi":
            kicked = gs.current
            await app.bot.send_message(
                gs.chat_id,
                f"‚è±Ô∏è H·∫øt gi·ªù l∆∞·ª£t! <a href='tg://user?id={kicked}'>ng∆∞·ªùi n√†y</a> b·ªã lo·∫°i.",
                parse_mode=ParseMode.HTML
            )
            # lo·∫°i
            try:
                gs.players.remove(kicked)
            except: ...
            if len(gs.players) <= 1:
                await app.bot.send_message(gs.chat_id, "üèÜ H·∫øt ng∆∞·ªùi ch∆°i. K·∫øt th√∫c v√°n.")
                GAMES.pop(gs.chat_id, None)
                return
            gs.current = gs.players[0]
            await _announce_turn(app, gs)
        else:
            await app.bot.send_message(gs.chat_id, "‚è±Ô∏è H·∫øt gi·ªù! BOT th·∫Øng üëë")
            GAMES.pop(gs.chat_id, None)

    # l√™n l·ªãch: nh·∫Øc 25s, timeout 30s
    app.job_queue.run_once(tick, when=TURN_SECONDS - 5, chat_id=gs.chat_id)
    gs.turn_job = app.job_queue.run_once(timeout, when=TURN_SECONDS, chat_id=gs.chat_id)

async def _announce_turn(app: Application, gs: GameState):
    if gs.mode == "solo":
        await app.bot.send_message(
            gs.chat_id,
            "üßç Ch·ªâ 1 ng∆∞·ªùi ‚Üí ch∆°i v·ªõi BOT.\n‚ú® G·ª≠i **c·ª•m 2 t·ª´ c√≥ nghƒ©a** b·∫•t k·ª≥."
            + (f"\n‚û°Ô∏è Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng **{gs.tail}**." if gs.tail else ""),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await app.bot.send_message(
            gs.chat_id,
            f"üéØ L∆∞·ª£t c·ªßa <a href='tg://user?id={gs.current}'>ng∆∞·ªùi n√†y</a>"
            + (f" ‚Äî b·∫Øt ƒë·∫ßu b·∫±ng <b>{gs.tail}</b>." if gs.tail else " ‚Äî m·ªü m√†n, g·ª≠i c·ª•m b·∫•t k·ª≥."),
            parse_mode=ParseMode.HTML
        )
    await _start_turn(app, gs)

async def _start_game(app: Application, chat_id: int, players: list[int]):
    random.shuffle(players)
    gs = GameState(chat_id, players)
    GAMES[chat_id] = gs

    if gs.mode == "solo":
        await app.bot.send_message(chat_id,
            "üßç Ch·ªâ 1 ng∆∞·ªùi ‚Üí ch∆°i v·ªõi BOT.\n‚ú® L∆∞·ª£t ƒë·∫ßu: g·ª≠i **c·ª•m 2 t·ª´ c√≥ nghƒ©a** b·∫•t k·ª≥.\nSau ƒë√≥ ƒë·ªëi ti·∫øp b·∫±ng **t·ª´ cu·ªëi**.",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await app.bot.send_message(chat_id,
            f"üë• {len(players)} ng∆∞·ªùi tham gia. BOT l√†m tr·ªçng t√†i.\n‚ú® Ng∆∞·ªùi m·ªü m√†n: <a href='tg://user?id={gs.current}'>ng∆∞·ªùi n√†y</a>.",
            parse_mode=ParseMode.HTML
        )
    await _announce_turn(app, gs)

def _fails_reason(phrase: str, gs: GameState):
    phrase = normalize_spaces(phrase)
    if not is_two_word_phrase(phrase):
        return "C√¢u ph·∫£i g·ªìm **2 t·ª´** (c·ª•m 2 t·ª´)."
    if gs.tail:
        a, b = first_last_word(phrase)
        if a.lower() != gs.tail.lower():
            return f"C√¢u ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng **{gs.tail}**."
    if phrase.lower() in gs.used:
        return "C·ª•m ƒë√£ d√πng r·ªìi."
    if not is_valid_phrase(phrase):
        return "C·ª•m kh√¥ng c√≥ nghƒ©a (kh√¥ng t√¨m th·∫•y)."
    return None

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    uid = update.effective_user.id
    text = (update.effective_message.text or "").strip()
    gs = GAMES.get(chat_id)
    if not gs:
        return  # kh√¥ng ·ªü trong v√°n

    # Ch·ªâ ng∆∞·ªùi ƒë·∫øn l∆∞·ª£t m·ªõi ƒë∆∞·ª£c ƒë√°nh (trong multi)
    if gs.mode == "multi" and uid != gs.current:
        return

    reason = _fails_reason(text, gs)
    if reason:
        if gs.mode == "multi":
            await update.effective_message.reply_text(
                f"‚ùå {reason}\n‚û°Ô∏è <a href='tg://user?id={uid}'>b·∫°n</a> b·ªã lo·∫°i.",
                parse_mode=ParseMode.HTML
            )
            try:
                gs.players.remove(uid)
            except: ...
            if len(gs.players) <= 1:
                await context.bot.send_message(chat_id, "üèÜ H·∫øt ng∆∞·ªùi ch∆°i. K·∫øt th√∫c v√°n.")
                GAMES.pop(chat_id, None)
                return
            gs.current = gs.players[0]
            await _announce_turn(context.application, gs)
        else:
            await update.effective_message.reply_text(f"‚ùå {reason}\nüëë BOT th·∫Øng!")
            GAMES.pop(chat_id, None)
        return

    # H·ª£p l·ªá
    gs.used.add(text.lower())
    _, tail = first_last_word(text)
    gs.last_phrase = text
    gs.tail = tail
    await update.effective_message.reply_text(random.choice(RIGHT_MSGS))

    if gs.mode == "multi":
        gs.rotate_next()
        await _announce_turn(context.application, gs)
    else:
        # Solo: ti·∫øp t·ª•c ki·ªÉm tra l∆∞·ª£t sau (kh√¥ng c·∫ßn BOT ƒë·ªëi t·ª´)
        await _announce_turn(context.application, gs)

# ================== L·ªÜNH KH√ÅC ==================
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "üëã Ch√†o nh√≥m!\n"
        "‚Ä¢ /newgame ‚Üí m·ªü s·∫£nh, m·ªçi ng∆∞·ªùi /join ƒë·ªÉ tham gia (t·ª± b·∫Øt ƒë·∫ßu sau 60s).\n"
        "‚Ä¢ /begin ‚Üí b·∫Øt ƒë·∫ßu ngay.\n"
        "‚Ä¢ /stop ‚Üí ƒë√≥ng s·∫£nh (n·∫øu ƒëang m·ªü).\n"
        "Lu·∫≠t: ƒë·ªëi **c·ª•m 2 t·ª´ c√≥ nghƒ©a**. L∆∞·ª£t sau ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng **t·ª´ th·ª© 2** c·ªßa c·ª•m tr∆∞·ªõc.\n"
        "M·ªói l∆∞·ª£t 30s, sai ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.",
        parse_mode=ParseMode.MARKDOWN
    )

async def iu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ch·ªâ cho ph√©p ng∆∞·ªùi d√πng c·ª• th·ªÉ
    if update.effective_user and (update.effective_user.username or ""):
        atname = "@" + update.effective_user.username
        if atname.lower() == ONLY_PING_USER.lower():
            await update.effective_message.reply_text("Anh Nam Y√™u Em Thi·ªáu ‚ù§Ô∏è")
            return
    await update.effective_message.reply_text("iu g√¨ m√† iu üòè")

# ================== APP ==================
async def initialize(app: Application):
    load_offline_dict()
    log.info("Init xong.")

async def stop(app: Application):
    pass

def build_app() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("Thi·∫øu TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(BOT_TOKEN).rate_limiter(AIORateLimiter()).build()

    app.add_handler(CommandHandler(["start"], start_cmd))
    app.add_handler(CommandHandler(["newgame","batdau"], newgame_cmd))
    app.add_handler(CommandHandler(["join","thamgia"], join_cmd))
    app.add_handler(CommandHandler(["begin","batdau_ngay"], begin_cmd))
    app.add_handler(CommandHandler(["stop","ketthuc"], stop_cmd))
    app.add_handler(CommandHandler(["iu"], iu_cmd))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    return app
