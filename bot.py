import os
import random
import asyncio
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional, Set

from telegram import Update, ChatPermissions
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

# ================== C·∫§U H√åNH / TH√îNG ƒêI·ªÜP ==================
ROUND_SECONDS = int(os.getenv("ROUND_SECONDS", "60"))
HALFTIME_SECONDS = int(os.getenv("HALFTIME_SECONDS", str(ROUND_SECONDS // 2)))
AUTO_BEGIN_SECONDS = int(os.getenv("AUTO_BEGIN_SECONDS", "60"))

HALF_WARNINGS = [
    "C√≤n 30 gi√¢y cu·ªëi ƒë·ªÉ b·∫°n suy nghƒ© v·ªÅ cu·ªôc ƒë·ªùi:))",
    "T·∫Øc ·∫ª ƒë·∫øn v·∫≠y sao, 30 gi√¢y cu·ªëi n√® :||",
    "30 v·∫´n ch∆∞a ph·∫£i T·∫øt, nh∆∞ng mi s·∫Øp h·∫øt gi·ªù r·ªìi. 30 gi√¢y!",
    "M·∫Øc ƒëitt r·∫∑n m√£i kh√¥ng ra. 30 gi√¢y cu·ªëi ·∫ª!",
    "30 gi√¢y cu·ªëi n√≠ ∆°i!"
]

WRONG_ANSWERS = [
    "IQ b·∫°n c·∫ßn ph·∫£i xem x√©t l·∫°i, m·ªùi ti·∫øp !!",
    "M·ªói th·∫ø c≈©ng sai, GG c≈©ng kh√¥ng c·ª©u ƒë∆∞·ª£c !",
    "Sai r·ªìi m√°, tra l·∫°i t·ª´ ƒëi·ªÉn ƒëi !",
    "T·ª´ g√¨ v·∫≠y m√°, h·ªçc l·∫°i l·ªõp 1 ƒëi !!",
    "·∫¢o ti·∫øng Vi·ªát hee",
    "Lo·∫°i, ng∆∞·ªùi ti·∫øp theo!",
    "Ch∆∞a ti·∫øn ho√° h·∫øt √†, t·ª´ n√†y con ng∆∞·ªùi d√πng sao‚Ä¶ Sai b√©t!!"
]

TIMEOUT_MSG = "‚è∞ H·∫øt gi·ªù, m·ªùi b·∫°n ra ngo√†i ch·ªù !!"

# ================== N·∫†P T·ª™ ƒêI·ªÇN 2 T·ª™ ==================
def load_dict() -> Set[str]:
    """N·∫°p c·ª•m 2 t·ª´ (m·ªói d√≤ng ƒë√∫ng 2 token ch·ªØ c√°i) t·ª´ file DICT_FILE."""
    fname = os.getenv("DICT_FILE", "dict_vi.txt").strip()
    search_paths = [
        Path(fname),
        Path(__file__).parent / fname,
        Path("/opt/render/project/src") / fname,  # Render
    ]
    used = None
    ok: Set[str] = set()
    dropped = 0
    for p in search_paths:
        if p.exists():
            used = p
            with p.open("r", encoding="utf-8") as f:
                for line in f:
                    s = line.strip().lower()
                    if not s:
                        continue
                    parts = s.split()
                    if len(parts) == 2 and all(part.isalpha() for part in parts):
                        ok.add(s)
                    else:
                        dropped += 1
            break
    if used is None:
        print(f"[DICT] ‚ùå Kh√¥ng t√¨m th·∫•y file: {fname}")
    else:
        print(f"[DICT] ‚úÖ {used} ‚Äî h·ª£p l·ªá: {len(ok)} | lo·∫°i: {dropped}")
    return ok

DICT: Set[str] = load_dict()

def is_two_word_phrase_in_dict(s: str) -> bool:
    s = " ".join(s.strip().lower().split())
    parts = s.split()
    if len(parts) != 2:
        return False
    if not all(part.isalpha() for part in parts):
        return False
    return s in DICT

# ================== TR·∫†NG TH√ÅI TR·∫¨N ==================
@dataclass
class Match:
    chat_id: int
    lobby_open: bool = False
    joined: List[int] = field(default_factory=list)
    active: bool = False
    turn_idx: int = 0
    current_player: Optional[int] = None

    # tasks
    auto_begin_task: Optional[asyncio.Task] = None
    half_task: Optional[asyncio.Task] = None
    timeout_task: Optional[asyncio.Task] = None

    # ai ƒë√£ d√πng c·ª•m n√†y r·ªìi (tr√°nh l·∫∑p)
    used_phrases: Set[str] = field(default_factory=set)

    def cancel_turn_tasks(self):
        for t in (self.half_task, self.timeout_task):
            if t and not t.done():
                t.cancel()
        self.half_task = None
        self.timeout_task = None

    def cancel_auto_begin(self):
        if self.auto_begin_task and not self.auto_begin_task.done():
            self.auto_begin_task.cancel()
        self.auto_begin_task = None

matches: Dict[int, Match] = {}

# ================== TI·ªÜN √çCH ==================
async def mention_user(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> str:
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        name = member.user.first_name or ""
        return f"[{name}](tg://user?id={user_id})"
    except Exception:
        return f"user_{user_id}"

def pick_next_idx(match: Match):
    if not match.joined:
        return
    match.turn_idx %= len(match.joined)
    match.current_player = match.joined[match.turn_idx]

async def schedule_turn_timers(update: Update, context: ContextTypes.DEFAULT_TYPE, match: Match):
    match.cancel_turn_tasks()

    async def half_warn():
        try:
            await asyncio.sleep(HALFTIME_SECONDS)
            # Ch·ªâ nh·∫Øc n·∫øu v·∫´n l√† ng∆∞·ªùi n√†y & ch∆∞a g·ª≠i g√¨
            if match.active:
                who = await mention_user(context, match.chat_id, match.current_player)
                msg = random.choice(HALF_WARNINGS)
                await context.bot.send_message(
                    match.chat_id, f"‚è≥ {who} ‚Äî {msg}", parse_mode=ParseMode.MARKDOWN
                )
        except asyncio.CancelledError:
            pass

    async def timeout_kick():
        try:
            await asyncio.sleep(ROUND_SECONDS)
            if not match.active:
                return
            who = match.current_player
            who_m = await mention_user(context, match.chat_id, who)
            await context.bot.send_message(match.chat_id, f"‚ùå {who_m} ‚Äî {TIMEOUT_MSG}", parse_mode=ParseMode.MARKDOWN)

            # lo·∫°i ng∆∞·ªùi ch∆°i qu√° gi·ªù
            if who in match.joined:
                idx = match.joined.index(who)
                match.joined.pop(idx)
                if idx <= match.turn_idx and match.turn_idx > 0:
                    match.turn_idx -= 1

            if len(match.joined) <= 1:
                # k·∫øt th√∫c
                if match.joined:
                    winner = await mention_user(context, match.chat_id, match.joined[0])
                    await context.bot.send_message(match.chat_id, f"üèÜ {winner} th·∫Øng cu·ªôc!", parse_mode=ParseMode.MARKDOWN)
                match.active = False
                match.cancel_turn_tasks()
                return

            # chuy·ªÉn l∆∞·ª£t
            match.turn_idx = (match.turn_idx + 1) % len(match.joined)
            pick_next_idx(match)
            who2 = await mention_user(context, match.chat_id, match.current_player)
            await context.bot.send_message(
                match.chat_id,
                f"üü¢ {who2} ƒë·∫øn l∆∞·ª£t. G·ª≠i **c·ª•m 2 t·ª´** c√≥ nghƒ©a (c√≥ trong t·ª´ ƒëi·ªÉn).",
                parse_mode=ParseMode.MARKDOWN,
            )
            await schedule_turn_timers(update, context, match)
        except asyncio.CancelledError:
            pass

    loop = asyncio.get_running_loop()
    match.half_task = loop.create_task(half_warn())
    match.timeout_task = loop.create_task(timeout_kick())

# ================== HANDLERS ==================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Ch√†o c·∫£ nh√†! /newgame ƒë·ªÉ m·ªü s·∫£nh, /join ƒë·ªÉ tham gia.\n"
        f"N·∫øu kh√¥ng ai /begin, bot s·∫Ω t·ª± b·∫Øt ƒë·∫ßu sau {AUTO_BEGIN_SECONDS}s.\n"
        f"T·ª´ ƒëi·ªÉn hi·ªán c√≥: {len(DICT)} c·ª•m 2 t·ª´."
    )

async def cmd_reload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global DICT
    DICT = load_dict()
    await update.message.reply_text(f"üîÅ ƒê√£ n·∫°p l·∫°i t·ª´ ƒëi·ªÉn: {len(DICT)} c·ª•m 2 t·ª´.")

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong ‚úÖ")

async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    m = matches.get(chat_id) or Match(chat_id)
    # reset
    m.lobby_open = True
    m.joined = []
    m.active = False
    m.turn_idx = 0
    m.current_player = None
    m.used_phrases.clear()
    m.cancel_turn_tasks()
    m.cancel_auto_begin()
    matches[chat_id] = m

    async def auto_begin():
        try:
            await asyncio.sleep(AUTO_BEGIN_SECONDS)
            if m.lobby_open and not m.active:
                await force_begin(update, context, m)
        except asyncio.CancelledError:
            pass

    loop = asyncio.get_running_loop()
    m.auto_begin_task = loop.create_task(auto_begin())

    await update.message.reply_text(
        f"üéÆ S·∫£nh m·ªü! /join ƒë·ªÉ tham gia. Kh√¥ng ai /begin th√¨ {AUTO_BEGIN_SECONDS}s n·ªØa t·ª± b·∫Øt ƒë·∫ßu."
    )

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    m = matches.get(chat_id)
    if not m or not m.lobby_open:
        await update.message.reply_text("Ch∆∞a /newgame m√† nh·∫≠p l·ªë n√® üòõ")
        return
    if user_id in m.joined:
        await update.message.reply_text("B·∫°n ƒë√£ tham gia!")
        return
    m.joined.append(user_id)
    who = await mention_user(context, chat_id, user_id)
    await update.message.reply_text(f"‚ûï {who} ƒë√£ tham gia!", parse_mode=ParseMode.MARKDOWN)

async def force_begin(update: Update, context: ContextTypes.DEFAULT_TYPE, m: Match):
    if m.active:
        return
    m.lobby_open = False
    if len(m.joined) == 0:
        await context.bot.send_message(m.chat_id, "Kh√¥ng c√≥ ai tham gia n√™n hu·ª∑ v√°n.")
        return
    if len(m.joined) == 1:
        await context.bot.send_message(m.chat_id, "Ch·ªâ c√≥ 1 ng∆∞·ªùi ch∆°i. C·∫ßn ‚â•2 ng∆∞·ªùi ƒë·ªÉ ch∆°i.")
        return

    random.shuffle(m.joined)
    m.active = True
    m.turn_idx = random.randrange(len(m.joined))
    pick_next_idx(m)
    m.cancel_auto_begin()

    await context.bot.send_message(
        m.chat_id,
        "üöÄ B·∫Øt ƒë·∫ßu! Sai lu·∫≠t ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.\n"
        "üìò Lu·∫≠t: ƒë√∫ng 2 t·ª´ ‚Ä¢ m·ªói t·ª´ ‚â•2 k√Ω t·ª± ‚Ä¢ m·ªói t·ª´ ph·∫£i c√≥ nghƒ©a (n·∫±m trong t·ª´ ƒëi·ªÉn).",
    )
    who = await mention_user(context, m.chat_id, m.current_player)
    await context.bot.send_message(
        m.chat_id,
        f"üëâ {who} ƒëi tr∆∞·ªõc. G·ª≠i **c·ª•m 2 t·ª´** c√≥ nghƒ©a b·∫•t k·ª≥.",
        parse_mode=ParseMode.MARKDOWN,
    )
    await schedule_turn_timers(update, context, m)

async def cmd_begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    m = matches.get(chat_id)
    if not m:
        await update.message.reply_text("Ch∆∞a /newgame k√¨a.")
        return
    await force_begin(update, context, m)

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    text = " ".join(update.message.text.strip().lower().split())

    m = matches.get(chat_id)
    if not m or not m.active:
        return  # b·ªè qua tin nh·∫Øn khi kh√¥ng ch∆°i

    # ch·ªâ x√©t tin c·ªßa ng∆∞·ªùi ƒëang t·ªõi l∆∞·ª£t
    if user_id != m.current_player:
        return

    # ki·ªÉm tra h·ª£p l·ªá trong t·ª´ ƒëi·ªÉn
    if not is_two_word_phrase_in_dict(text) or text in m.used_phrases:
        msg = random.choice(WRONG_ANSWERS)
        await update.message.reply_text(f"‚ùå {msg}")
        # lo·∫°i ng∆∞·ªùi ch∆°i
        idx = m.joined.index(user_id)
        m.joined.pop(idx)
        if idx <= m.turn_idx and m.turn_idx > 0:
            m.turn_idx -= 1

        if len(m.joined) <= 1:
            if m.joined:
                winner = await mention_user(context, chat_id, m.joined[0])
                await context.bot.send_message(chat_id, f"üèÜ {winner} th·∫Øng cu·ªôc!", parse_mode=ParseMode.MARKDOWN)
            m.active = False
            m.cancel_turn_tasks()
            return

        # chuy·ªÉn l∆∞·ª£t
        m.turn_idx = (m.turn_idx + 1) % len(m.joined)
        pick_next_idx(m)
        who2 = await mention_user(context, chat_id, m.current_player)
        await context.bot.send_message(
            chat_id, f"üü¢ {who2} ƒë·∫øn l∆∞·ª£t. G·ª≠i **c·ª•m 2 t·ª´** c√≥ nghƒ©a.", parse_mode=ParseMode.MARKDOWN
        )
        await schedule_turn_timers(update, context, m)
        return

    # h·ª£p l·ªá
    m.used_phrases.add(text)
    await update.message.reply_text("‚úÖ H·ª£p l·ªá. Ti·∫øp t·ª•c!")

    # chuy·ªÉn l∆∞·ª£t
    m.turn_idx = (m.turn_idx + 1) % len(m.joined)
    pick_next_idx(m)
    who2 = await mention_user(context, chat_id, m.current_player)
    await context.bot.send_message(
        chat_id, f"üü¢ {who2} ƒë·∫øn l∆∞·ª£t. G·ª≠i **c·ª•m 2 t·ª´** c√≥ nghƒ©a.", parse_mode=ParseMode.MARKDOWN
    )
    await schedule_turn_timers(update, context, m)

# ================== T·∫†O APP ==================
def build_app() -> Application:
    token = os.getenv("TELEGRAM_TOKEN", "").strip()
    if not token:
        raise RuntimeError("Missing TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("ping", cmd_ping))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join", cmd_join))
    app.add_handler(CommandHandler("begin", cmd_begin))
    app.add_handler(CommandHandler("reload", cmd_reload))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app
