# bot.py
import os
import re
import random
import unicodedata
import urllib.request
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ====== C·∫§U H√åNH T·ª™ ENV ======
TOKEN = os.environ["TELEGRAM_TOKEN"]
ROUND_SECONDS = int(os.environ.get("ROUND_SECONDS", "60"))  # 60 gi√¢y/l∆∞·ª£t
MIN_WORD_LEN   = int(os.environ.get("MIN_WORD_LEN", "2"))
DEFAULT_MODE   = os.environ.get("DEFAULT_MODE", "rhyme")

# ====== TH√îNG B√ÅO NG·∫™U NHI√äN ======
HALF_TIME_MESSAGES = [
    "C√≤n 30 gi√¢y cu·ªëi ƒë·ªÉ b·∫°n suy nghƒ© v·ªÅ cu·ªôc ƒë·ªùi:))",
    "T·∫Øc ·∫ª ƒë·∫øn v·∫≠y sao , 30 gi√¢y cu·ªëi n√® :||",
    "30 v·∫´n ch∆∞a ph·∫£i t·∫øt , nh∆∞ng mi s·∫Øp h·∫øt gi·ªù r·ªìi . 30 gi√¢y",
    "m·∫Øc ƒëitt r·∫∑n m·∫µ kh√¥ng ra . 30 gi√¢y cu·ªëi ·∫ª",
    "30 gi√¢y cu·ªëi n√≠ ∆°i",
]

WRONG_MESSAGES = [
    "IQ b·∫°n c·∫ßn ph·∫£i xem x√©t l·∫°i , m·ªùi ti·∫øp !!",
    "M·ªói th·∫ø c≈©ng sai , GG c≈©ng kh√¥ng c·ª©u ƒë∆∞·ª£c !",
    "Sai r·ªìi m√° , Tra l·∫°i t·ª´ ƒëi·ªÉn ƒëi !",
    "T·ª´ g√¨ v·∫≠y m√° , H·ªçc l·∫°i l·ªõp 1 ƒëi !!",
    "·∫¢o ti·∫øng vi·ªát hee",
    "Lo·∫°i , ng∆∞·ªùi ti·∫øp theo",
    "Ch∆∞a ti·∫øn ho√° h·∫øt √† , t·ª´ n√†y con ng∆∞·ªùi d√πng sao . Sai b√©t!!",
]

TIMEOUT_MESSAGE = "H·∫øt gi·ªù , m·ªùi b·∫°n ra ngo√†i ch·ªù !!"

# ====== T·ª™ ƒêI·ªÇN OFFLINE (T·ª∞ T·∫†O N·∫æU CH∆ØA C√ì) ======
DICT_PATH = "dictionary.txt"
# Ngu·ªìn l·ªõn c·ªßa Hunspell Vietnamese
HUNSPELL_DIC_URL = "https://raw.githubusercontent.com/1ec5/hunspell-vi/master/dictionaries/vi.dic"

def strip_diacritics(s: str) -> str:
    nf = unicodedata.normalize("NFD", s)
    return "".join(ch for ch in nf if unicodedata.category(ch) != "Mn")

def normalize_word(w: str) -> str:
    return strip_diacritics(w.strip().lower())

def _download_and_build_dictionary(dst_path: str = DICT_PATH) -> int:
    """
    T·∫£i file .dic c·ªßa Hunspell, l·ªçc v√† build dictionary.txt (m·ªói d√≤ng 1 m·ª•c).
    """
    print("[DICT] Downloading Hunspell vi.dic ...")
    with urllib.request.urlopen(HUNSPELL_DIC_URL, timeout=60) as resp:
        raw = resp.read().decode("utf-8", errors="ignore")

    lines = raw.splitlines()
    # D√≤ng ƒë·∫ßu c√≥ th·ªÉ l√† s·ªë l∆∞·ª£ng m·ª•c -> b·ªè n·∫øu l√† s·ªë
    if lines and lines[0].strip().isdigit():
        lines = lines[1:]

    vocab: Set[str] = set()
    for ln in lines:
        if not ln:
            continue
        # Hunspell c√≥ d·∫°ng "t·ª´/FLAGS" -> l·∫•y ph·∫ßn tr∆∞·ªõc '/'
        token = ln.split("/", 1)[0].strip()

        # N·ªõi l·ªçc: cho ch·ªØ, s·ªë, kho·∫£ng tr·∫Øng, g·∫°ch n·ªëi, d·∫•u nh√°y
        token = re.sub(r"[^0-9A-Za-z√Ä-·ªπ√†-·ªπƒêƒë\s\-']", " ", token, flags=re.UNICODE)
        token = re.sub(r"\s+", " ", token).strip()
        if not token:
            continue
        if len(token) < 2:
            continue

        # Chu·∫©n ho√° kh√¥ng d·∫•u ƒë·ªÉ tra nhanh
        vocab.add(normalize_word(token))

    with open(dst_path, "w", encoding="utf-8") as f:
        for w in sorted(vocab):
            f.write(w + "\n")

    print(f"[DICT] Built {dst_path} with {len(vocab)} words.")
    return len(vocab)

VIET_WORDS: Set[str] = set()
try:
    # N·∫øu file ch∆∞a c√≥ ho·∫∑c qu√° nh·ªè -> t·∫£i & build l·∫°i
    if not os.path.exists(DICT_PATH) or os.path.getsize(DICT_PATH) < 500_000:  # ~0.5MB+
        _download_and_build_dictionary(DICT_PATH)
    with open(DICT_PATH, "r", encoding="utf-8") as f:
        for line in f:
            w = line.strip()
            if not w or w.startswith("#"):
                continue
            VIET_WORDS.add(w)  # ƒë√£ normalize s·∫µn
    print(f"[DICT] Loaded {len(VIET_WORDS)} entries.")
except Exception as e:
    print("[DICT] Cannot load/build dictionary:", e)
    VIET_WORDS = set()

def is_valid_dictionary_word(text: str) -> bool:
    """D√πng t·ª´ cu·ªëi c·ªßa c·ª•m, so kh·ªõp kh√¥ng d·∫•u trong set VIET_WORDS."""
    if not VIET_WORDS:
        return False
    last = text.strip().split()[-1]
    return normalize_word(last) in VIET_WORDS

# ====== RHYME KEY ======
def rhyme_key(word: str) -> str:
    w = normalize_word(word)
    last = w.split()[-1] if w else ""
    return last[-2:] if len(last) >= 2 else last

# ====== TR·∫†NG TH√ÅI V√ÅN ======
@dataclass
class Match:
    mode: str = DEFAULT_MODE
    active: bool = False
    players: List[int] = field(default_factory=list)  # t·∫•t c·∫£ ng∆∞·ªùi ƒë√£ join
    alive: List[int] = field(default_factory=list)    # ng∆∞·ªùi c√≤n trong v√°n
    turn_idx: int = 0
    current_word: str = ""
    used: Set[str] = field(default_factory=set)
    # timer cho t·ª´ng l∆∞·ª£t
    timer_job_id: Optional[str] = None
    halftime_job_id: Optional[str] = None
    # lobby auto-begin
    lobby_job_id: Optional[str] = None

MATCHES: Dict[int, Match] = {}

def get_match(chat_id: int) -> Match:
    if chat_id not in MATCHES:
        MATCHES[chat_id] = Match()
    return MATCHES[chat_id]

# ====== H·∫∏N GI·ªú ======
async def cancel_job_by_name(context: ContextTypes.DEFAULT_TYPE, name: Optional[str]):
    if not name:
        return
    for j in context.job_queue.get_jobs_by_name(name):
        j.schedule_removal()

async def set_turn_timers(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """ƒê·∫∑t c·∫£ 2 m·ªëc: 30s nh·∫Øc & 60s lo·∫°i"""
    match = get_match(chat_id)
    # hu·ª∑ job c≈© n·∫øu c√≥
    await cancel_job_by_name(context, match.timer_job_id)
    await cancel_job_by_name(context, match.halftime_job_id)

    # 30s: nh·∫Øc
    halftime_name = f"half_{chat_id}"
    match.halftime_job_id = halftime_name
    context.job_queue.run_once(half_time_notify, when=ROUND_SECONDS // 2, name=halftime_name, data={"chat_id": chat_id})

    # 60s: lo·∫°i
    timer_name = f"turn_{chat_id}"
    match.timer_job_id = timer_name
    context.job_queue.run_once(timeout_eliminate, when=ROUND_SECONDS, name=timer_name, data={"chat_id": chat_id})

async def half_time_notify(ctx):
    chat_id = ctx.job.data["chat_id"]
    context: ContextTypes.DEFAULT_TYPE = ctx.application  # type: ignore
    match = get_match(chat_id)
    if not match.active or not match.alive:
        return
    uid = match.alive[match.turn_idx]
    member = await context.bot.get_chat_member(chat_id, uid)
    msg = random.choice(HALF_TIME_MESSAGES)
    await context.bot.send_message(chat_id, f"‚è≥ {member.user.mention_html()} ‚Äî {msg}", parse_mode=ParseMode.HTML)

async def timeout_eliminate(ctx):
    chat_id = ctx.job.data["chat_id"]
    context: ContextTypes.DEFAULT_TYPE = ctx.application  # type: ignore
    match = get_match(chat_id)
    if not match.active or not match.alive:
        return
    uid = match.alive[match.turn_idx]
    member = await context.bot.get_chat_member(chat_id, uid)
    await context.bot.send_message(
        chat_id, f"‚è∞ {member.user.mention_html()} ‚Äî {TIMEOUT_MESSAGE}",
        parse_mode=ParseMode.HTML
    )
    match.alive.pop(match.turn_idx)
    if len(match.alive) == 1:
        win_id = match.alive[0]
        win_member = await context.bot.get_chat_member(chat_id, win_id)
        await context.bot.send_message(chat_id, f"üèÜ {win_member.user.full_name} th·∫Øng! üéâ")
        match.active = False
        match.timer_job_id = None
        match.halftime_job_id = None
        return
    match.turn_idx %= len(match.alive)
    await announce_turn(context, chat_id, match)

async def announce_turn(context: ContextTypes.DEFAULT_TYPE, chat_id: int, match: Match):
    user_id = match.alive[match.turn_idx]
    member = await context.bot.get_chat_member(chat_id, user_id)
    head = f"üîÅ Lu·∫≠t: v·∫ßn ‚Ä¢ ‚â•{MIN_WORD_LEN} k√Ω t·ª± ‚Ä¢ t·ª´ ph·∫£i c√≥ nghƒ©a."
    if match.current_word:
        body = (f"üëâ {member.user.mention_html()} ƒë·∫øn l∆∞·ª£t!\n"
                f"T·ª´ tr∆∞·ªõc: <b>{match.current_word}</b>\n"
                f"‚Üí G·ª≠i t·ª´ m·ªõi c√≥ <b>v·∫ßn gi·ªëng</b> v√† <b>c√≥ nghƒ©a</b>.")
    else:
        body = f"üëâ {member.user.mention_html()} ƒëi tr∆∞·ªõc. G·ª≠i t·ª´ h·ª£p l·ªá b·∫•t k·ª≥."
    await context.bot.send_message(chat_id, f"{head}\n{body}", parse_mode=ParseMode.HTML)
    await set_turn_timers(context, chat_id)

# ====== LOBBY AUTO-BEGIN ======
async def schedule_lobby_autobegin(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    match = get_match(chat_id)
    # hu·ª∑ job lobby c≈© n·∫øu c√≥
    await cancel_job_by_name(context, match.lobby_job_id)
    name = f"lobby_{chat_id}"
    match.lobby_job_id = name
    context.job_queue.run_once(lobby_autobegin_job, when=60, name=name, data={"chat_id": chat_id})

async def lobby_autobegin_job(ctx):
    chat_id = ctx.job.data["chat_id"]
    context: ContextTypes.DEFAULT_TYPE = ctx.application  # type: ignore
    match = get_match(chat_id)
    if match.active:
        return
    if len(match.players) >= 2:
        # b·∫Øt ƒë·∫ßu v√† ch·ªçn ng·∫´u nhi√™n ng∆∞·ªùi ƒëi tr∆∞·ªõc
        match.active = True
        match.alive = list(match.players)
        random.shuffle(match.alive)
        match.turn_idx = 0
        match.current_word = ""
        match.used.clear()
        await context.bot.send_message(chat_id, "‚è±Ô∏è H·∫øt 1 ph√∫t ch·ªù ‚Äì t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu v√°n!")
        await announce_turn(context, chat_id, match)
    else:
        await context.bot.send_message(chat_id, "‚è±Ô∏è H·∫øt 1 ph√∫t nh∆∞ng ch∆∞a ƒë·ªß ng∆∞·ªùi (‚â•2). V√°n ch∆∞a th·ªÉ b·∫Øt ƒë·∫ßu.")

# ====== COMMANDS ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Bot ƒë·ªëi ch·ªØ (rhyme) ‚Äì ki·ªÉm tra nghƒ©a b·∫±ng t·ª´ ƒëi·ªÉn l·ªõn.\n"
        f"‚åõ {ROUND_SECONDS}s/l∆∞·ª£t (30s s·∫Ω c√≥ nh·∫Øc) ‚Ä¢ ‚â•{MIN_WORD_LEN} k√Ω t·ª±\n"
        "L·ªánh: /newgame, /join, /begin, /stop"
    )

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong ‚úÖ")

async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    MATCHES[chat_id] = Match()
    await update.message.reply_text("üß© T·∫°o s·∫£nh m·ªõi. M·ªçi ng∆∞·ªùi /join ƒë·ªÉ tham gia. Sau 1 ph√∫t s·∫Ω t·ª± b·∫Øt ƒë·∫ßu.")
    # auto-join ng∆∞·ªùi g·ªçi l·ªánh cho ch·∫Øc
    creator = update.effective_user.id
    MATCHES[chat_id].players.append(creator)
    # ƒë·∫∑t h·∫πn gi·ªù auto-begin
    await schedule_lobby_autobegin(context, chat_id)

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    match = get_match(chat_id)
    if match.active:
        await update.message.reply_text("V√°n ƒëang ch·∫°y, ƒë·ª£i v√°n sau.")
        return
    if user_id in match.players:
        await update.message.reply_text("B·∫°n ƒë√£ tham gia r·ªìi!")
        return
    match.players.append(user_id)
    await update.message.reply_text(f"‚úÖ {update.effective_user.full_name} ƒë√£ tham gia ({len(match.players)} ng∆∞·ªùi).")

async def cmd_begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    match = get_match(chat_id)
    if match.active:
        await update.message.reply_text("V√°n ƒëang ch·∫°y r·ªìi.")
        return
    if len(match.players) < 2:
        await update.message.reply_text("C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi /join m·ªõi b·∫Øt ƒë·∫ßu.")
        return
    # b·∫Øt ƒë·∫ßu & random ng∆∞·ªùi ƒëi tr∆∞·ªõc
    match.active = True
    match.alive = list(match.players)
    random.shuffle(match.alive)
    match.turn_idx = 0
    match.current_word = ""
    match.used.clear()
    await update.message.reply_text("üöÄ B·∫Øt ƒë·∫ßu! Sai lu·∫≠t ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.")
    await announce_turn(context, chat_id, match)

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    match = get_match(chat_id)
    match.active = False
    match.timer_job_id = None
    match.halftime_job_id = None
    await update.message.reply_text("‚èπÔ∏è ƒê√£ k·∫øt th√∫c v√°n.")

# ====== X·ª¨ L√ù TIN NH·∫ÆN ======
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    match = get_match(chat_id)
    if not match.active or not match.alive:
        return
    if user_id != match.alive[match.turn_idx]:
        return

    eliminated = False

    if len(text) < MIN_WORD_LEN:
        eliminated = True
    else:
        ok = True
        # 1) C√≥ nghƒ©a?
        if not is_valid_dictionary_word(text):
            ok = False
        # 2) ƒê√∫ng v·∫ßn?
        if ok and match.current_word:
            ok = rhyme_key(text) != "" and rhyme_key(text) == rhyme_key(match.current_word)
        # 3) Tr√°nh l·∫∑p
        key = normalize_word(text)
        if ok and key in match.used:
            ok = False

        if ok:
            match.used.add(key)
            match.current_word = text
            match.turn_idx = (match.turn_idx + 1) % len(match.alive)
            await update.message.reply_text("‚úÖ H·ª£p l·ªá. T·ªõi l∆∞·ª£t k·∫ø ti·∫øp!")
            # ƒë·∫∑t l·∫°i timer cho ng∆∞·ªùi k·∫ø ti·∫øp
            await set_turn_timers(context, chat_id)
        else:
            eliminated = True

    if eliminated:
        # m·∫Øng vui ng·∫´u nhi√™n
        await update.message.reply_text(f"‚ùå {random.choice(WRONG_MESSAGES)}")
        match.alive.pop(match.turn_idx)

    # ki·ªÉm tra th·∫Øng/thua
    if match.active:
        if len(match.alive) == 1:
            win_id = match.alive[0]
            mem = await context.bot.get_chat_member(chat_id, win_id)
            await context.bot.send_message(chat_id, f"üèÜ {mem.user.full_name} th·∫Øng! üéâ")
            match.active = False
            match.timer_job_id = None
            match.halftime_job_id = None
            return
        if eliminated:
            match.turn_idx %= len(match.alive)
            await announce_turn(context, chat_id, match)

# ====== APP ======
def build_application() -> Application:
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start",  cmd_start))
    app.add_handler(CommandHandler("ping",   cmd_ping))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join",    cmd_join))
    app.add_handler(CommandHandler("begin",   cmd_begin))
    app.add_handler(CommandHandler("stop",    cmd_stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app
