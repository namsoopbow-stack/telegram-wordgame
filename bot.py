# bot.py
import os
import re
import random
import unicodedata
import urllib.request
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ====== C·∫§U H√åNH ======
TOKEN = os.environ["TELEGRAM_TOKEN"]
ROUND_SECONDS = int(os.environ.get("ROUND_SECONDS", "60"))  # 60 gi√¢y/l∆∞·ª£t
MIN_WORD_LEN   = int(os.environ.get("MIN_WORD_LEN", "2"))  # t·ªëi thi·ªÉu k√Ω t·ª±
DEFAULT_MODE   = os.environ.get("DEFAULT_MODE", "rhyme")
STRICT_DICT    = os.environ.get("STRICT_DICT", "0") == "1" # b·∫Øt bu·ªôc trong t·ª´ ƒëi·ªÉn

# ====== TH√îNG B√ÅO ======
HALF_TIME_MESSAGES = [
    "C√≤n 30 gi√¢y cu·ªëi ƒë·ªÉ b·∫°n suy nghƒ© v·ªÅ cu·ªôc ƒë·ªùi:))",
    "T·∫Øc ·∫ª ƒë·∫øn v·∫≠y sao , 30 gi√¢y cu·ªëi n√® :||",
    "30 v·∫´n ch∆∞a ph·∫£i t·∫øt , nh∆∞ng mi s·∫Øp h·∫øt gi·ªù r·ªìi . 30 gi√¢y",
    "m·∫Øc ƒëitt r·∫∑n m·∫µ kh√¥ng ra . 30 gi√¢y cu·ªëi ·∫ª",
    "30 gi√¢y cu·ªëi n√≠ ∆°i",
]
WRONG_MESSAGES = [
    "IQ b·∫°n c·∫ßn ph·∫£i xem x√©t l·∫°i , m·ªùi ti·∫øp !!",
    "M·ªói th·∫ø c≈©ng sai , GG c≈©ng kh√¥ng c·ª©u ƒë∆∞·ª£c !",
    "Sai r·ªìi m√° , Tra l·∫°i t·ª´ ƒëi·ªÉn ƒëi !",
    "T·ª´ g√¨ v·∫≠y m√° , H·ªçc l·∫°i l·ªõp 1 ƒëi !!",
    "·∫¢o ti·∫øng vi·ªát hee",
    "Lo·∫°i , ng∆∞·ªùi ti·∫øp theo",
    "Ch∆∞a ti·∫øn ho√° h·∫øt √† , t·ª´ n√†y con ng∆∞·ªùi d√πng sao . Sai b√©t!!",
]
TIMEOUT_MESSAGE = "H·∫øt gi·ªù , m·ªùi b·∫°n ra ngo√†i ch·ªù !!"

# ====== T·ª™ ƒêI·ªÇN (cache offline) ======
DICT_PATH = "dictionary.txt"
HUNSPELL_DIC_URL = "https://raw.githubusercontent.com/1ec5/hunspell-vi/master/dictionaries/vi.dic"

def remove_accents(s: str) -> str:
    nf = unicodedata.normalize("NFD", s)
    return "".join(ch for ch in nf if unicodedata.category(ch) != "Mn")

def norm_noaccent_lower(s: str) -> str:
    return remove_accents(s.strip().lower())

def _download_and_build_dictionary(dst_path: str = DICT_PATH) -> int:
    # t·∫£i danh s√°ch g·ªëc (root) t·ª´ hunspell
    print("[DICT] Downloading Hunspell vi.dic ...")
    with urllib.request.urlopen(HUNSPELL_DIC_URL, timeout=60) as resp:
        raw = resp.read().decode("utf-8", errors="ignore")
    lines = raw.splitlines()
    # n·∫øu d√≤ng ƒë·∫ßu l√† con s·ªë, b·ªè
    if lines and lines[0].strip().isdigit():
        lines = lines[1:]

    vocab: Set[str] = set()
    for ln in lines:
        if not ln:
            continue
        token = ln.split("/", 1)[0].strip()
        # gi·ªØ ch·ªØ, d·∫•u g·∫°ch, d·∫•u '
        token = re.sub(r"[^0-9A-Za-z√Ä-·ªπ√†-·ªπƒêƒë\s\-']", " ", token, flags=re.UNICODE)
        token = re.sub(r"\s+", " ", token).strip()
        if not token:
            continue
        # l∆∞u c·∫£ c√≥ d·∫•u & kh√¥ng d·∫•u (ƒë·ªÉ tra linh ho·∫°t)
        token_nd = norm_noaccent_lower(token)
        if len(token_nd) >= 2:
            vocab.add(token_nd)

        token_l = token.lower()
        if len(token_l) >= 2:
            vocab.add(token_l)

    with open(dst_path, "w", encoding="utf-8") as f:
        for w in sorted(vocab):
            f.write(w + "\n")
    print(f"[DICT] Built {dst_path} with {len(vocab)} entries.")
    return len(vocab)

VIET_WORDS: Set[str] = set()
try:
    if not os.path.exists(DICT_PATH) or os.path.getsize(DICT_PATH) < 200_000:
        _download_and_build_dictionary(DICT_PATH)
    with open(DICT_PATH, "r", encoding="utf-8") as f:
        for line in f:
            w = line.strip()
            if w and not w.startswith("#"):
                VIET_WORDS.add(w)
    print(f"[DICT] Loaded {len(VIET_WORDS)} entries.")
except Exception as e:
    print("[DICT] Cannot load/build dictionary:", e)
    VIET_WORDS = set()

# --- helpers ki·ªÉm tra nghƒ©a & v·∫ßn ---
VIET_TOKEN_RE = re.compile(r"^[a-z√†-·∫°·∫£√£√°√¢·∫ß·∫≠·∫©·∫´·∫•ƒÉ·∫±·∫∑·∫≥·∫µ·∫Ø√®·∫ª·∫Ω√©√™·ªÅ·ªá·ªÉ·ªÖ·∫ø√¨·ªâƒ©√≠√≤·ªè√µ√≥√¥·ªì·ªô·ªï·ªó·ªë∆°·ªù·ª£·ªü·ª°·ªõ"
                           r"√π·ªß≈©√∫∆∞·ª´·ª±·ª≠·ªØ·ª©·ª≥·ª∑·ªπ√Ωƒë\-']{2,}$", re.IGNORECASE)

def token_valid_loose(w: str) -> bool:
    """n·ªõi l·ªèng: ch·ªØ c√°i VN, d√†i >=2 (tr√°nh lo·∫°i nh·∫ßm)"""
    w = w.strip()
    return bool(VIET_TOKEN_RE.match(w))

def is_valid_word(w: str) -> bool:
    w_l = w.strip().lower()
    w_nd = norm_noaccent_lower(w)
    in_dict = (w_l in VIET_WORDS) or (w_nd in VIET_WORDS)
    if STRICT_DICT:
        return in_dict
    return in_dict or token_valid_loose(w)

def all_words_valid(phrase: str) -> bool:
    words = [t for t in re.split(r"\s+", phrase.strip()) if t]
    if not words:
        return False
    return all(is_valid_word(t) for t in words)

def rhyme_key(word_or_phrase: str) -> str:
    last = word_or_phrase.strip().split()[-1].lower()
    last_nd = norm_noaccent_lower(last)
    return last_nd[-2:] if len(last_nd) >= 2 else last_nd

def phrase_has_rhyme(phrase: str, target_key: str) -> bool:
    """ƒê√∫ng n·∫øu TRONG C·ª§M c√≥ √çT NH·∫§T 1 t·ª´ c√≥ v·∫ßn = target_key."""
    for w in re.split(r"\s+", phrase.strip()):
        if not w:
            continue
        if rhyme_key(w) == target_key:
            return True
    return False

# ====== TR·∫†NG TH√ÅI V√ÅN ======
@dataclass
class Match:
    mode: str = DEFAULT_MODE
    active: bool = False
    players: List[int] = field(default_factory=list)
    alive: List[int] = field(default_factory=list)
    turn_idx: int = 0
    current_word: str = ""
    used: Set[str] = field(default_factory=set)
    timer_job_id: Optional[str] = None
    halftime_job_id: Optional[str] = None
    lobby_job_id: Optional[str] = None

MATCHES: Dict[int, Match] = {}

def get_match(chat_id: int) -> Match:
    if chat_id not in MATCHES:
        MATCHES[chat_id] = Match()
    return MATCHES[chat_id]

# ====== H·∫∏N GI·ªú ======
async def _cancel_job_by_name(app: Application, name: Optional[str]):
    if not name:
        return
    for j in app.job_queue.get_jobs_by_name(name):
        j.schedule_removal()

async def set_turn_timers(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    match = get_match(chat_id)
    await _cancel_job_by_name(context.application, match.timer_job_id)
    await _cancel_job_by_name(context.application, match.halftime_job_id)

    half_name = f"half_{chat_id}"
    match.halftime_job_id = half_name
    context.application.job_queue.run_once(
        half_time_notify, when=ROUND_SECONDS // 2, name=half_name, data={"chat_id": chat_id}
    )

    timer_name = f"turn_{chat_id}"
    match.timer_job_id = timer_name
    context.application.job_queue.run_once(
        timeout_eliminate, when=ROUND_SECONDS, name=timer_name, data={"chat_id": chat_id}
    )

async def half_time_notify(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data["chat_id"]
    match = get_match(chat_id)
    if not match.active or not match.alive:
        return
    uid = match.alive[match.turn_idx]
    member = await context.bot.get_chat_member(chat_id, uid)
    await context.bot.send_message(
        chat_id, f"‚è≥ {member.user.mention_html()} ‚Äî {random.choice(HALF_TIME_MESSAGES)}",
        parse_mode=ParseMode.HTML
    )

async def timeout_eliminate(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data["chat_id"]
    match = get_match(chat_id)
    if not match.active or not match.alive:
        return
    uid = match.alive[match.turn_idx]
    member = await context.bot.get_chat_member(chat_id, uid)
    await context.bot.send_message(
        chat_id, f"‚è∞ {member.user.mention_html()} ‚Äî {TIMEOUT_MESSAGE}",
        parse_mode=ParseMode.HTML
    )
    match.alive.pop(match.turn_idx)
    if len(match.alive) == 1:
        win_id = match.alive[0]
        win_member = await context.bot.get_chat_member(chat_id, win_id)
        await context.bot.send_message(chat_id, f"üèÜ {win_member.user.full_name} th·∫Øng! üéâ")
        match.active = False
        match.timer_job_id = None
        match.halftime_job_id = None
        return
    match.turn_idx %= len(match.alive)
    await announce_turn(context, chat_id, match)

async def announce_turn(context: ContextTypes.DEFAULT_TYPE, chat_id: int, match: Match):
    user_id = match.alive[match.turn_idx]
    member = await context.bot.get_chat_member(chat_id, user_id)
    head = f"üîÅ Lu·∫≠t: v·∫ßn ‚Ä¢ ‚â•{MIN_WORD_LEN} k√Ω t·ª± ‚Ä¢ t·ª´ ph·∫£i c√≥ nghƒ©a."
    if match.current_word:
        body = (f"üëâ {member.user.mention_html()} ƒë·∫øn l∆∞·ª£t!\n"
                f"T·ª´ tr∆∞·ªõc: <b>{match.current_word}</b>\n"
                f"‚Üí G·ª≠i c·ª•m c√≥ <b>√≠t nh·∫•t 1 t·ª´</b> v·∫ßn gi·ªëng v√† <b>m·ªçi t·ª´ ƒë·ªÅu c√≥ nghƒ©a</b>.")
    else:
        body = f"üëâ {member.user.mention_html()} ƒëi tr∆∞·ªõc. G·ª≠i c·ª•m h·ª£p l·ªá b·∫•t k·ª≥."
    await context.bot.send_message(chat_id, f"{head}\n{body}", parse_mode=ParseMode.HTML)
    await set_turn_timers(context, chat_id)

# ====== LOBBY AUTO-BEGIN ======
async def schedule_lobby_autobegin(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    match = get_match(chat_id)
    await _cancel_job_by_name(context.application, match.lobby_job_id)
    name = f"lobby_{chat_id}"
    match.lobby_job_id = name
    # n·∫øu sau 60s kh√¥ng ai /begin, t·ª± b·∫Øt ƒë·∫ßu (n·∫øu ‚â•2 ng∆∞·ªùi)
    context.application.job_queue.run_once(lobby_autobegin_job, when=60, name=name, data={"chat_id": chat_id})

async def lobby_autobegin_job(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data["chat_id"]
    match = get_match(chat_id)
    if match.active:
        return
    if len(match.players) >= 2:
        match.active = True
        match.alive = list(match.players)
        random.shuffle(match.alive)
        match.turn_idx = 0
        match.current_word = ""
        match.used.clear()
        await context.bot.send_message(chat_id, "‚è±Ô∏è H·∫øt 1 ph√∫t ch·ªù ‚Äì t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu v√°n!")
        await announce_turn(context, chat_id, match)
    else:
        await context.bot.send_message(chat_id, "‚è±Ô∏è H·∫øt 1 ph√∫t nh∆∞ng ch∆∞a ƒë·ªß ng∆∞·ªùi (‚â•2). V√°n ch∆∞a th·ªÉ b·∫Øt ƒë·∫ßu.")

# ====== COMMANDS ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Bot ƒë·ªëi ch·ªØ (rhyme) ‚Äì ki·ªÉm tra nghƒ©a.\n"
        f"‚åõ {ROUND_SECONDS}s/l∆∞·ª£t (30s c√≥ nh·∫Øc) ‚Ä¢ ‚â•{MIN_WORD_LEN} k√Ω t·ª±\n"
        "L·ªánh: /newgame, /join, /begin, /stop, /ping"
    )

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong ‚úÖ")

async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    MATCHES[chat_id] = Match()
    await update.message.reply_text("üß© T·∫°o s·∫£nh m·ªõi. M·ªçi ng∆∞·ªùi /join ƒë·ªÉ tham gia. Sau 1 ph√∫t s·∫Ω t·ª± b·∫Øt ƒë·∫ßu.")
    # auto-join ng∆∞·ªùi g·ªçi l·ªánh
    creator = update.effective_user.id
    MATCHES[chat_id].players.append(creator)
    await schedule_lobby_autobegin(context, chat_id)

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    match = get_match(chat_id)
    if match.active:
        await update.message.reply_text("V√°n ƒëang ch·∫°y, ƒë·ª£i v√°n sau.")
        return
    if user_id in match.players:
        await update.message.reply_text("B·∫°n ƒë√£ tham gia r·ªìi!")
        return
    match.players.append(user_id)
    await update.message.reply_text(f"‚úÖ {update.effective_user.full_name} ƒë√£ tham gia ({len(match.players)} ng∆∞·ªùi).")
    # reset l·∫°i ƒë·ªìng h·ªì lobby (t√≠nh l·∫°i 60s t·ª´ l·∫ßn tham gia cu·ªëi)
    await schedule_lobby_autobegin(context, chat_id)

async def cmd_begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    match = get_match(chat_id)
    if match.active:
        await update.message.reply_text("V√°n ƒëang ch·∫°y r·ªìi.")
        return
    if len(match.players) < 2:
        await update.message.reply_text("C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi /join m·ªõi b·∫Øt ƒë·∫ßu.")
        return
    match.active = True
    match.alive = list(match.players)
    random.shuffle(match.alive)
    match.turn_idx = 0
    match.current_word = ""
    match.used.clear()
    await update.message.reply_text("üöÄ B·∫Øt ƒë·∫ßu! Sai lu·∫≠t ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.")
    await announce_turn(context, chat_id, match)

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    match = get_match(chat_id)
    match.active = False
    match.timer_job_id = None
    match.halftime_job_id = None
    await update.message.reply_text("‚õî ƒê√£ k·∫øt th√∫c v√°n.")

# ====== X·ª¨ L√ù TIN NH·∫ÆN ======
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    match = get_match(chat_id)
    if not match.active or not match.alive:
        return
    if user_id != match.alive[match.turn_idx]:
        return

    eliminated = False

    # lo·∫°i b·ªè tin qu√° ng·∫Øn / kh√¥ng ph·∫£i ch·ªØ
    cleaned = re.sub(r"\s+", " ", text)
    if len(cleaned) < MIN_WORD_LEN or not any(c.isalpha() for c in cleaned):
        eliminated = True
    else:
        ok = True
        # 1) m·ªçi t·ª´ ƒë·ªÅu c√≥ nghƒ©a (n·ªõi l·ªèng n·∫øu STRICT_DICT=0)
        ok = all_words_valid(cleaned)

        # 2) ƒë√∫ng v·∫ßn (√≠t nh·∫•t m·ªôt t·ª´ trong c·ª•m tr√πng v·∫ßn v·ªõi t·ª´ cu·ªëi tr∆∞·ªõc ƒë√≥)
        if ok and match.current_word:
            target = rhyme_key(match.current_word)
            ok = phrase_has_rhyme(cleaned, target)

        # 3) tr√°nh l·∫∑p c·∫£ c·ª•m (kh√¥ng d·∫•u)
        key = norm_noaccent_lower(cleaned)
        if ok and key in match.used:
            ok = False

        if ok:
            match.used.add(key)
            match.current_word = cleaned
            match.turn_idx = (match.turn_idx + 1) % len(match.alive)
            await update.message.reply_text("‚úÖ H·ª£p l·ªá. T·ªõi l∆∞·ª£t k·∫ø ti·∫øp!")
            await set_turn_timers(context, chat_id)
        else:
            eliminated = True

    if eliminated:
        await update.message.reply_text(f"‚ùå {random.choice(WRONG_MESSAGES)}")
        match.alive.pop(match.turn_idx)

    if match.active:
        if len(match.alive) == 1:
            win_id = match.alive[0]
            mem = await context.bot.get_chat_member(chat_id, win_id)
            await context.bot.send_message(chat_id, f"üèÜ {mem.user.full_name} th·∫Øng! üéâ")
            match.active = False
            match.timer_job_id = None
            match.halftime_job_id = None
            return
        if eliminated:
            match.turn_idx %= len(match.alive)
            await announce_turn(context, chat_id, match)

# ====== APP ======
def build_application() -> Application:
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start",  cmd_start))
    app.add_handler(CommandHandler("ping",   cmd_ping))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join",    cmd_join))
    app.add_handler(CommandHandler("begin",   cmd_begin))
    app.add_handler(CommandHandler("stop",    cmd_stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app
