import os
import re
import asyncio
from dataclasses import dataclass, field
from random import choice, shuffle
from typing import Dict, List, Optional

from telegram import Update
from telegram.constants import ParseMode, ChatType
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ================== C·∫§U H√åNH & TH√îNG B√ÅO ==================
TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
if not TOKEN:
    raise RuntimeError("Thi·∫øu TELEGRAM_TOKEN trong Environment Variables!")

ROUND_SECONDS = int(os.getenv("ROUND_SECONDS", "60"))  # 60s m·ªói l∆∞·ª£t
HALF_TIME = ROUND_SECONDS // 2

# Ch·ªâ ch·∫•p nh·∫≠n ƒë√∫ng 2 t·ª´
MIN_WORDS = 2
MAX_WORDS = 2

DEFAULT_MODE = os.getenv("DEFAULT_MODE", "rhyme").strip().lower()  # 'rhyme'
STRICT_DICT = int(os.getenv("STRICT_DICT", "0"))  # 0: n·ªõi l·ªèng, 1: si·∫øt (gi·∫£n l∆∞·ª£c)

HALF_WARNINGS = [
    "C√≤n 30 gi√¢y cu·ªëi ƒë·ªÉ b·∫°n suy nghƒ© v·ªÅ cu·ªôc ƒë·ªùi:))",
    "T·∫Øc ·∫ª ƒë·∫øn v·∫≠y sao, 30 gi√¢y cu·ªëi n√® :||",
    "30 v·∫´n ch∆∞a ph·∫£i T·∫øt, nh∆∞ng mi s·∫Øp h·∫øt gi·ªù r·ªìi. 30 gi√¢y!",
    "M·∫Øc ƒë*tt r·∫∑n m√† kh√¥ng ra? 30 gi√¢y cu·ªëi n√®!",
    "30 gi√¢y cu·ªëi n√≠ ∆°i!",
]

WRONG_REPLIES = [
    "IQ b·∫°n c·∫ßn ph·∫£i xem x√©t l·∫°i, m·ªùi ti·∫øp!!",
    "M·ªói th·∫ø c≈©ng sai, GG c≈©ng kh√¥ng c·ª©u ƒë∆∞·ª£c!",
    "Sai r·ªìi m√°, tra l·∫°i t·ª´ ƒëi·ªÉn ƒëi!",
    "T·ª´ g√¨ v·∫≠y m√°, h·ªçc l·∫°i l·ªõp 1 ƒëi!!",
    "·∫¢o ti·∫øng Vi·ªát heee.",
    "Lo·∫°i, ng∆∞·ªùi ti·∫øp theo.",
    "Ch∆∞a ti·∫øn ho√° h·∫øt √†? T·ª´ n√†y con ng∆∞·ªùi d√πng sao? Sai b√©t!!",
]

TIMEOUT_REPLY = "H·∫øt gi·ªù, m·ªùi b·∫°n ra ngo√†i ch·ªù!!"

RULES_TEXT = "üìÑ Lu·∫≠t: v·∫ßn ‚Ä¢ ƒë√∫ng 2 t·ª´ ‚Ä¢ t·ª´ ph·∫£i c√≥ nghƒ©a."

# ================== TI·ªÜN √çCH NG√îN NG·ªÆ ==================

# B·ªè d·∫•u + chu·∫©n h√≥a lower ƒë·ªÉ so v·∫ßn ƒë∆°n gi·∫£n
VN_MAP = str.maketrans(
    "√Ä√Å√Ç·∫¶·∫§·∫®·∫™·∫¨ƒÇ·∫∞·∫Æ·∫≤·∫¥·∫∂√à√â√ä·ªÄ·∫æ·ªÇ·ªÑ·ªÜ√å√ç√í√ì√î·ªí·ªê·ªî·ªñ·ªò∆†·ªú·ªö·ªû·ª†·ª¢√ô√ö∆Ø·ª™·ª®·ª¨·ªÆ·ª∞·ª≤√ùƒê√†√°√¢·∫ß·∫•·∫©·∫´·∫≠ƒÉ·∫±·∫Ø·∫≥·∫µ·∫∑√®√©√™·ªÅ·∫ø·ªÉ·ªÖ·ªá√¨√≠√≤√≥√¥·ªì·ªë·ªï·ªó·ªô∆°·ªù·ªõ·ªü·ª°·ª£√π√∫∆∞·ª´·ª©·ª≠·ªØ·ª±·ª≥√Ωƒë",
    "AAAAAA AAAAAAEEEEEEEII OOOOOO OOOOO UUUUUUU YYDaaaaaa aaaaaa eeeeeeeii oooooo ooooo uuuuuuu yyd",
)
def norm_noaccent_lower(s: str) -> str:
    return s.translate(VN_MAP).lower()

# Key v·∫ßn cho ti·∫øng Vi·ªát (ƒë∆°n gi·∫£n h√≥a):
# L·∫•y t·ª´ nguy√™n √¢m cu·ªëi c√πng t·ªõi h·∫øt t·ª´ (bao g·ªìm c/ch/m/n/ng/nh/p/t)
VOWELS = "aeiouy"
ENDINGS = ("c","ch","m","n","ng","nh","p","t")
def rhyme_key(word: str) -> str:
    w = norm_noaccent_lower(word)
    last_vowel_idx = -1
    for i in range(len(w)-1, -1, -1):
        if w[i] in VOWELS:
            last_vowel_idx = i
            break
    if last_vowel_idx == -1:
        return w[-2:] if len(w) >= 2 else w
    tail = w[last_vowel_idx:]
    # ∆Øu ti√™n c√°c ƒëu√¥i ph·ªï bi·∫øn
    for ed in sorted(ENDINGS, key=len, reverse=True):
        if tail.endswith(ed):
            return tail
    return tail

WORD_RE = re.compile(r"[A-Za-z√Ä-·ª¥√†-·ªµƒêƒë]+(?:[-'][A-Za-z√Ä-·ª¥√†-·ªµƒêƒë]+)?", re.UNICODE)
def extract_words(text: str) -> List[str]:
    return WORD_RE.findall(text)

def looks_meaningful(tokens: List[str]) -> bool:
    """Ki·ªÉm tra 'c√≥ nghƒ©a' ki·ªÉu ƒë∆°n gi·∫£n ƒë·ªÉ tr√°nh qu√° g·∫Øt:
       - M·ªói token >= 2 k√Ω t·ª± sau khi b·ªè d·∫•u
       - N·∫øu STRICT_DICT = 1: y√™u c·∫ßu m·∫°nh h∆°n (√≠t nh·∫•t 1 nguy√™n √¢m m·ªói token)
    """
    if len(tokens) != 2:
        return False
    for t in tokens:
        t2 = norm_noaccent_lower(t)
        if len(t2) < 2:
            return False
        if STRICT_DICT:
            if not any(ch in VOWELS for ch in t2):
                return False
    return True

# ================== TR·∫†NG TH√ÅI TR·∫¨N ==================

@dataclass
class Match:
    chat_id: int
    mode: str = DEFAULT_MODE  # 'rhyme'
    active: bool = False
    alive: List[int] = field(default_factory=list)  # user_ids theo th·ª© t·ª± l∆∞·ª£t
    turn_idx: int = 0
    current_phrase: Optional[str] = None  # "hai tu" normalized
    halftime_job_name: Optional[str] = None
    timeout_job_name: Optional[str] = None
    autostart_job_name: Optional[str] = None

MATCHES: Dict[int, Match] = {}  # chat_id -> Match

# ================== JOB/TIMER ==================

def safe_cancel_job_by_name(context: CallbackContext, name: Optional[str]):
    if not name:
        return
    try:
        for j in context.job_queue.get_jobs_by_name(name):
            j.schedule_removal()
    except Exception:
        pass

async def send_half_warning(context: CallbackContext):
    job = context.job
    chat_id = job.data["chat_id"]
    try:
        await context.bot.send_message(chat_id, f"‚è≥ {choice(HALF_WARNINGS)}")
    except Exception:
        pass

async def turn_timeout(context: CallbackContext):
    job = context.job
    chat_id = job.data["chat_id"]
    match: Match = job.data["match"]

    # Lo·∫°i ng∆∞·ªùi ƒëang t·ªõi l∆∞·ª£t
    out_idx = match.turn_idx
    out_uid = match.alive[out_idx]
    mem = await context.bot.get_chat_member(chat_id, out_uid)
    await context.bot.send_message(chat_id, f"‚ùå {TIMEOUT_REPLY} ({mem.user.first_name})")

    # C·∫≠p nh·∫≠t state
    match.alive.pop(out_idx)
    match.current_phrase = None
    match.halftime_job_name = None
    match.timeout_job_name = None

    # K·∫øt th√∫c n·∫øu c√≤n 1 ng∆∞·ªùi
    if len(match.alive) <= 1:
        if match.alive:
            winner = match.alive[0]
            m = await context.bot.get_chat_member(chat_id, winner)
            await context.bot.send_message(chat_id, f"üèÜ {m.user.first_name} chi·∫øn th·∫Øng! GG!")
        match.active = False
        return

    # Sau khi pop, turn_idx ƒëang tr·ªè ƒë√∫ng ng∆∞·ªùi m·ªõi
    await announce_turn(context, match)

def set_turn_timers(context: CallbackContext, chat_id: int, match: Match):
    safe_cancel_job_by_name(context, match.halftime_job_name)
    safe_cancel_job_by_name(context, match.timeout_job_name)

    # C·∫£nh b√°o 30s
    half_job = context.job_queue.run_once(
        send_half_warning,
        when=HALF_TIME,
        data={"chat_id": chat_id, "match": match},
        name=f"half-{chat_id}",
    )
    # H·∫øt gi·ªù 60s
    tout_job = context.job_queue.run_once(
        turn_timeout,
        when=ROUND_SECONDS,
        data={"chat_id": chat_id, "match": match},
        name=f"tout-{chat_id}",
    )

    match.halftime_job_name = half_job.name
    match.timeout_job_name = tout_job.name

# ================== TH√îNG B√ÅO L∆Ø·ª¢T ==================

async def announce_turn(context: CallbackContext, match: Match):
    chat_id = match.chat_id
    uid = match.alive[match.turn_idx]
    mem = await context.bot.get_chat_member(chat_id, uid)

    await context.bot.send_message(chat_id, RULES_TEXT)
    await context.bot.send_message(
        chat_id,
        f"üëâ {mem.user.first_name} ƒë·∫øn l∆∞·ª£t! G·ª≠i c·ª•m **2 t·ª´** h·ª£p l·ªá b·∫•t k·ª≥.",
        parse_mode=ParseMode.MARKDOWN,
    )
    set_turn_timers(context, chat_id, match)

# ================== HANDLERS ==================

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello, g√µ /newgame ƒë·ªÉ t·∫°o ph√≤ng, /join ƒë·ªÉ tham gia, /begin ƒë·ªÉ b·∫Øt ƒë·∫ßu (ho·∫∑c t·ª± b·∫Øt ƒë·∫ßu sau 60s).")

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await update.message.reply_text("H√£y th√™m bot v√†o nh√≥m ƒë·ªÉ ch∆°i nh√©!")
        return

    chat_id = chat.id
    m = Match(chat_id=chat_id, mode=DEFAULT_MODE)
    MATCHES[chat_id] = m

    # Ng∆∞·ªùi t·∫°o game join lu√¥n
    user_id = update.effective_user.id
    if user_id not in m.alive:
        m.alive.append(user_id)

    await update.message.reply_text("üÜï T·∫°o ph√≤ng m·ªõi. G√µ /join ƒë·ªÉ tham gia. Sau **60s** s·∫Ω t·ª± b·∫Øt ƒë·∫ßu!")
    # L√™n l·ªãch t·ª± b·∫Øt ƒë·∫ßu
    safe_cancel_job_by_name(context, m.autostart_job_name)
    job = context.job_queue.run_once(
        auto_begin_cb,
        when=60,
        data={"chat_id": chat_id},
        name=f"abegin-{chat_id}",
    )
    m.autostart_job_name = job.name

async def auto_begin_cb(context: CallbackContext):
    chat_id = context.job.data["chat_id"]
    m = MATCHES.get(chat_id)
    if not m or m.active:
        return
    if len(m.alive) >= 1:
        shuffle(m.alive)  # ng·∫´u nhi√™n ng∆∞·ªùi ƒëi tr∆∞·ªõc
        m.turn_idx = 0
        m.active = True
        await context.bot.send_message(chat_id, "üöÄ B·∫Øt ƒë·∫ßu! Sai lu·∫≠t ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.")
        await announce_turn(context, m)

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    m = MATCHES.get(chat_id)
    if not m:
        await update.message.reply_text("Ch∆∞a c√≥ ph√≤ng. G√µ /newgame ƒë·ªÉ t·∫°o.")
        return
    uid = update.effective_user.id
    if uid not in m.alive:
        m.alive.append(uid)
        await update.message.reply_text("ƒê√£ tham gia!")
    else:
        await update.message.reply_text("B·∫°n ƒë√£ trong ph√≤ng r·ªìi!")

async def cmd_begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    m = MATCHES.get(chat_id)
    if not m:
        await update.message.reply_text("Ch∆∞a c√≥ ph√≤ng. /newgame tr∆∞·ªõc nh√©.")
        return
    if m.active:
        await update.message.reply_text("ƒêang ch∆°i r·ªìi!")
        return
    if len(m.alive) < 1:
        await update.message.reply_text("Ch∆∞a ai tham gia.")
        return
    shuffle(m.alive)  # ng·∫´u nhi√™n ng∆∞·ªùi ƒëi tr∆∞·ªõc
    m.turn_idx = 0
    m.active = True
    await update.message.reply_text("üöÄ B·∫Øt ƒë·∫ßu! Sai lu·∫≠t ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.")
    await announce_turn(context, m)

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    m = MATCHES.get(chat_id)
    if not m:
        await update.message.reply_text("Kh√¥ng c√≥ game n√†o.")
        return
    m.active = False
    safe_cancel_job_by_name(context, m.halftime_job_name)
    safe_cancel_job_by_name(context, m.timeout_job_name)
    safe_cancel_job_by_name(context, m.autostart_job_name)
    await update.message.reply_text("‚õî ƒê√£ d·ª´ng game.")

# ====== X·ª¨ L√ù VƒÇN B·∫¢N ======
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    m = MATCHES.get(chat_id)
    if not m or not m.active:
        return

    # Kh√¥ng ƒë√∫ng ng∆∞·ªùi t·ªõi l∆∞·ª£t
    if user_id != m.alive[m.turn_idx]:
        return

    tokens = extract_words(update.message.text.strip())
    if len(tokens) != 2:
        await update.message.reply_text(f"‚ùå {choice(WRONG_REPLIES)}")
        return

    # 'C√≥ nghƒ©a'
    if not looks_meaningful(tokens):
        await update.message.reply_text(f"‚ùå {choice(WRONG_REPLIES)}")
        # Lo·∫°i ngay theo y√™u c·∫ßu
        out_idx = m.turn_idx
        m.alive.pop(out_idx)
        if len(m.alive) <= 1:
            if m.alive:
                winner = m.alive[0]
                mm = await context.bot.get_chat_member(chat_id, winner)
                await context.bot.send_message(chat_id, f"üèÜ {mm.user.first_name} chi·∫øn th·∫Øng! GG!")
            m.active = False
            return
        await announce_turn(context, m)
        return

    phrase_norm = " ".join(norm_noaccent_lower(t) for t in tokens)

    # Ki·ªÉm tra v·∫ßn (n·∫øu ƒë√£ c√≥ c·ª•m tr∆∞·ªõc)
    if m.mode == "rhyme" and m.current_phrase:
        last_prev = m.current_phrase.split()[-1]
        last_now = norm_noaccent_lower(tokens[-1])
        if rhyme_key(last_prev) != rhyme_key(last_now):
            await update.message.reply_text(f"‚ùå {choice(WRONG_REPLIES)}")
            # Lo·∫°i ngay
            out_idx = m.turn_idx
            m.alive.pop(out_idx)
            if len(m.alive) <= 1:
                if m.alive:
                    winner = m.alive[0]
                    mm = await context.bot.get_chat_member(chat_id, winner)
                    await context.bot.send_message(chat_id, f"üèÜ {mm.user.first_name} chi·∫øn th·∫Øng! GG!")
                m.active = False
                return
            await announce_turn(context, m)
            return

    # H·ª£p l·ªá ‚Üí hu·ª∑ timer c≈©, l∆∞u c·ª•m, chuy·ªÉn l∆∞·ª£t
    safe_cancel_job_by_name(context, m.halftime_job_name)
    safe_cancel_job_by_name(context, m.timeout_job_name)

    m.current_phrase = phrase_norm
    m.turn_idx = (m.turn_idx + 1) % len(m.alive)
    await update.message.reply_text("‚úÖ H·ª£p l·ªá. T·ªõi l∆∞·ª£t k·∫ø ti·∫øp!")
    await announce_turn(context, m)

# ================== T·∫†O APPLICATION ==================
def build_app() -> Application:
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("ping", cmd_ping))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join", cmd_join))
    app.add_handler(CommandHandler("begin", cmd_begin))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    return app

application = build_app()
