# bot.py
import os
import random
import asyncio
from typing import Dict, List, Optional, Set, Tuple

from unidecode import unidecode
from telegram import Update, Message, Chat, User
from telegram.constants import ChatType, ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ======= ENV =======
TOKEN = os.environ.get("TELEGRAM_TOKEN", "")
ROUND_SECONDS = int(os.environ.get("ROUND_SECONDS", "60"))        # th·ªùi gian 1 l∆∞·ª£t
HALFTIME_SECONDS = int(os.environ.get("HALFTIME_SECONDS", "30"))  # m·ªëc nh·∫Øc 30s
AUTO_BEGIN_SECONDS = int(os.environ.get("AUTO_BEGIN_SECONDS", "60"))  # /newgame xong kh√¥ng ai /begin th√¨ t·ª± b·∫Øt ƒë·∫ßu
DICT_FILE = os.environ.get("DICT_FILE", "dict_vi.txt")
MIN_WORD_LEN = int(os.environ.get("MIN_WORD_LEN", "2"))
MIN_PHRASE_WORDS = int(os.environ.get("MIN_PHRASE_WORDS", "2"))
MAX_PHRASE_WORDS = int(os.environ.get("MAX_PHRASE_WORDS", "2"))

# ======= PHRASES =======
HALF_WARNINGS = [
    "C√≤n 30 gi√¢y cu·ªëi ƒë·ªÉ b·∫°n suy nghƒ© v·ªÅ cu·ªôc ƒë·ªùi :))",
    "T·∫Øc ·∫ª ƒë·∫øn v·∫≠y sao, 30 gi√¢y cu·ªëi n√® :||",
    "30s v·∫´n ch∆∞a ph·∫£i T·∫øt, nh∆∞ng mi s·∫Øp h·∫øt gi·ªù r·ªìi!",
    "M·∫Øc ƒëitt r·∫∑n m√£i kh√¥ng ra √†? 30 gi√¢y cu·ªëi n√®!",
    "30 gi√¢y cu·ªëi n√≠ ∆°i!"
]
WRONG_REPLIES = [
    "IQ b·∫°n c·∫ßn ph·∫£i xem x√©t l·∫°i, m·ªùi ti·∫øp!!",
    "M·ªói th·∫ø c≈©ng sai, GG c≈©ng kh√¥ng c·ª©u ƒë∆∞·ª£c!",
    "Sai r·ªìi m√°, tra l·∫°i t·ª´ ƒëi·ªÉn ƒëi!",
    "T·ª´ g√¨ v·∫≠y m√°, h·ªçc l·∫°i l·ªõp 1 ƒëi!!",
    "·∫¢o ti·∫øng Vi·ªát h√™!",
    "Lo·∫°i, ng∆∞·ªùi ti·∫øp theo!",
    "Ch∆∞a ti·∫øn ho√° h·∫øt √†, t·ª´ n√†y con ng∆∞·ªùi d√πng sao. Sai b√©t!!"
]
TIMEOUT_REPLY = "‚è∞ H·∫øt gi·ªù, m·ªùi b·∫°n ra ngo√†i ch·ªù!!"
HARD_ELIMINATE = "‚ùå ÂÇªÈÄº C·∫•m C√£i !!!"

# ======= DICTIONARY =======
def load_dict(path: str) -> Set[str]:
    s: Set[str] = set()
    if not os.path.exists(path):
        return s
    with open(path, "r", encoding="utf-8") as f:
        for line in f:
            w = " ".join(line.strip().lower().split())
            if w:
                s.add(w)
    return s

DICT: Set[str] = load_dict(DICT_FILE)

# ======= GAME STATE =======
class Match:
    def __init__(self, chat_id: int):
        self.chat_id = chat_id
        self.joined: List[int] = []
        self.turn_idx: int = 0
        self.active: bool = False
        self.current_phrase: Optional[str] = None
        self.used: Set[str] = set()

        # Jobs
        self.job_half_name: Optional[str] = None
        self.job_full_name: Optional[str] = None
        self.job_autobegin_name: Optional[str] = None

    def reset(self):
        self.turn_idx = 0
        self.active = False
        self.current_phrase = None
        self.used.clear()
        self.cancel_timers()

    def cancel_timers(self):
        self.job_half_name = None
        self.job_full_name = None

# chat_id -> Match
ROOMS: Dict[int, Match] = {}

# ======= UTILS =======
def normalize_phrase(text: str) -> str:
    return " ".join(text.strip().lower().split())

def count_words(text: str) -> int:
    return len(normalize_phrase(text).split())

def is_valid_phrase(text: str) -> bool:
    """H·ª£p l·ªá khi:
    - ƒë√∫ng 2 t·ª´ (2 v·∫ßn)
    - m·ªói t·ª´ c√≥ >= MIN_WORD_LEN k√Ω t·ª±
    - c·ª•m c√≥ nghƒ©a (c√≥ trong DICT)
    """
    t = normalize_phrase(text)
    parts = t.split()
    if len(parts) != 2:
        return False
    if any(len(p) < MIN_WORD_LEN for p in parts):
        return False
    return t in DICT

async def say_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(
        "üìò Lu·∫≠t: ƒë√∫ng **2 t·ª´** ‚Ä¢ m·ªói t·ª´ ‚â•2 k√Ω t·ª± ‚Ä¢ m·ªói t·ª´ **ph·∫£i c√≥ nghƒ©a** (n·∫±m trong t·ª´ ƒëi·ªÉn).",
        parse_mode=ParseMode.MARKDOWN
    )

def current_player_id(m: Match) -> Optional[int]:
    if not m.joined:
        return None
    return m.joined[m.turn_idx % len(m.joined)]

async def announce_turn(update: Update, context: ContextTypes.DEFAULT_TYPE, m: Match):
    chat_id = m.chat_id
    uid = current_player_id(m)
    if uid is None:
        return
    user = await context.bot.get_chat_member(chat_id, uid)
    await context.bot.send_message(
        chat_id,
        f"üü¢ {user.user.first_name} ƒëi tr∆∞·ªõc. G·ª≠i **c·ª•m 2 t·ª´** c√≥ nghƒ©a b·∫•t k·ª≥.",
        parse_mode=ParseMode.MARKDOWN
    )
    await set_turn_timers(context, chat_id)

async def set_turn_timers(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """ƒê·∫∑t nh·∫Øc 30s v√† lo·∫°i sau 60s cho ng∆∞·ªùi ƒëang t·ªõi l∆∞·ª£t."""
    app = context.application
    if app is None or app.job_queue is None:
        return  # job-queue ch∆∞a s·∫µn s√†ng

    m = ROOMS.get(chat_id)
    if not m or not m.active:
        return

    # H·ªßy timer c≈©
    if m.job_half_name:
        app.job_queue.scheduler.remove_job(m.job_half_name, jobstore='default', quiet=True)
    if m.job_full_name:
        app.job_queue.scheduler.remove_job(m.job_full_name, jobstore='default', quiet=True)

    # T·∫°o t√™n job ri√™ng cho t·ª´ng chat
    m.job_half_name = f"half_{chat_id}"
    m.job_full_name = f"full_{chat_id}"

    # callback
    async def half_warn_cb(ctx: ContextTypes.DEFAULT_TYPE):
        # N·∫øu ng∆∞·ªùi t·ªõi l∆∞·ª£t ch∆∞a nh·∫Øn g√¨ m·ªõi
        if m.active:
            warn = random.choice(HALF_WARNINGS)
            await ctx.bot.send_message(chat_id, f"‚ö†Ô∏è {warn}")

    async def full_timeout_cb(ctx: ContextTypes.DEFAULT_TYPE):
        if not m.active:
            return
        uid = current_player_id(m)
        if uid is None:
            return
        user = await ctx.bot.get_chat_member(chat_id, uid)
        await ctx.bot.send_message(chat_id, f"{TIMEOUT_REPLY}\nüëâ {user.user.first_name} b·ªã lo·∫°i.")
        # lo·∫°i ng∆∞·ªùi ch∆°i
        if uid in m.joined:
            m.joined.remove(uid)
        if len(m.joined) < 2:
            m.active = False
            await ctx.bot.send_message(chat_id, "üèÅ V√°n k·∫øt th√∫c (kh√¥ng ƒë·ªß ng∆∞·ªùi).")
            return
        # chuy·ªÉn l∆∞·ª£t
        m.turn_idx %= len(m.joined)
        await announce_turn(Update(update_id=0), ctx, m)

    # ƒê·∫∑t job
    app.job_queue.run_once(half_warn_cb, when=HALFTIME_SECONDS, chat_id=chat_id, name=m.job_half_name)
    app.job_queue.run_once(full_timeout_cb, when=ROUND_SECONDS, chat_id=chat_id, name=m.job_full_name)

async def cancel_autobegin(context: ContextTypes.DEFAULT_TYPE, m: Match):
    if context.application and context.application.job_queue and m.job_autobegin_name:
        try:
            context.application.job_queue.scheduler.remove_job(m.job_autobegin_name, jobstore='default', quiet=True)
        except Exception:
            pass
    m.job_autobegin_name = None

async def schedule_autobegin(update: Update, context: ContextTypes.DEFAULT_TYPE, m: Match):
    """/newgame xong n·∫øu kh√¥ng ai /begin trong AUTO_BEGIN_SECONDS th√¨ t·ª± b·∫Øt ƒë·∫ßu."""
    if not context.application or not context.application.job_queue:
        return
    chat_id = m.chat_id
    m.job_autobegin_name = f"auto_begin_{chat_id}"

    async def do_begin(ctx: ContextTypes.DEFAULT_TYPE):
        if m.active:
            return
        if len(m.joined) >= 2:
            await ctx.bot.send_message(chat_id, "üöÄ Kh√¥ng ai /begin ‚Äì t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu!")
            # ch·ªçn ng·∫´u nhi√™n ng∆∞·ªùi ƒëi tr∆∞·ªõc
            random.shuffle(m.joined)
            m.turn_idx = 0
            m.active = True
            await say_rules(update, ctx)
            await announce_turn(update, ctx, m)

    context.application.job_queue.run_once(do_begin, when=AUTO_BEGIN_SECONDS, chat_id=chat_id, name=m.job_autobegin_name)

# ======= COMMANDS =======
async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat or chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await update.message.reply_text("Ch·ªâ ch∆°i trong nh√≥m!")
        return

    m = ROOMS.get(chat.id) or Match(chat.id)
    ROOMS[chat.id] = m
    m.reset()
    # auto th√™m ng∆∞·ªùi g·ªçi /newgame
    user = update.effective_user
    if user and user.id not in m.joined:
        m.joined.append(user.id)

    await update.message.reply_text("üéÆ S·∫£nh m·ªü! /join ƒë·ªÉ tham gia. Kh√¥ng ai /begin th√¨ "
                                    f"{AUTO_BEGIN_SECONDS}s n·ªØa t·ª± b·∫Øt ƒë·∫ßu.")
    await schedule_autobegin(update, context, m)

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    m = ROOMS.get(chat_id)
    if not m:
        await update.message.reply_text("Ch∆∞a m·ªü s·∫£nh. D√πng /newgame tr∆∞·ªõc.")
        return
    uid = update.effective_user.id
    if uid not in m.joined:
        m.joined.append(uid)
        await update.message.reply_text("‚úÖ ƒê√£ tham gia!")
    else:
        await update.message.reply_text("B·∫°n ƒë√£ ·ªü trong s·∫£nh.")
    # n·∫øu ƒë√£ c√≥ ‚â•2 ng∆∞·ªùi th√¨ c√≥ th·ªÉ b·∫Øt ƒë·∫ßu b·∫•t k·ª≥ l√∫c n√†o

async def cmd_begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    m = ROOMS.get(chat_id)
    if not m:
        await update.message.reply_text("Ch∆∞a m·ªü s·∫£nh. /newgame tr∆∞·ªõc.")
        return
    if m.active:
        await update.message.reply_text("ƒêang ch∆°i r·ªìi.")
        return
    if len(m.joined) < 2:
        await update.message.reply_text("C·∫ßn t·ªëi thi·ªÉu 2 ng∆∞·ªùi. /join th√™m b·∫°n!")
        return

    await cancel_autobegin(context, m)
    random.shuffle(m.joined)
    m.turn_idx = 0
    m.active = True

    await update.message.reply_text("üöÄ B·∫Øt ƒë·∫ßu! Sai lu·∫≠t ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.")
    await say_rules(update, context)
    await announce_turn(update, context, m)

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    m = ROOMS.get(chat_id)
    if not m:
        await update.message.reply_text("Kh√¥ng c√≥ v√°n n√†o.")
        return
    m.reset()
    await update.message.reply_text("‚õî ƒê√£ d·ª´ng v√°n hi·ªán t·∫°i.")

# ======= TEXT HANDLER =======
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg: Message = update.message
    if not msg or not msg.text:
        return
    chat_id = msg.chat_id
    m = ROOMS.get(chat_id)
    if not m or not m.active:
        return

    # ch·ªâ ng∆∞·ªùi t·ªõi l∆∞·ª£t ƒë∆∞·ª£c tr·∫£ l·ªùi
    uid = update.effective_user.id
    if uid != current_player_id(m):
        return

    phrase = normalize_phrase(msg.text)

    # Lu·∫≠t ‚Äúƒë√∫ng 2 t·ª´‚Äù ‚Äì n·∫øu 1 ho·∫∑c ‚â•3 t·ª´: lo·∫°i ngay, tr·∫£ c√¢u HARD_ELIMINATE
    wc = count_words(phrase)
    if wc != 2:
        await msg.reply_text(HARD_ELIMINATE)
        # lo·∫°i
        if uid in m.joined:
            m.joined.remove(uid)
        if len(m.joined) < 2:
            m.active = False
            await context.bot.send_message(chat_id, "üèÅ V√°n k·∫øt th√∫c (kh√¥ng ƒë·ªß ng∆∞·ªùi).")
            return
        m.turn_idx %= len(m.joined)
        await announce_turn(update, context, m)
        return

    # ki·ªÉm tra c√≥ nghƒ©a + ƒë·ªô d√†i m·ªói t·ª´
    if not is_valid_phrase(phrase):
        await msg.reply_text(f"‚ùå {random.choice(WRONG_REPLIES)}")
        # lo·∫°i
        if uid in m.joined:
            m.joined.remove(uid)
        if len(m.joined) < 2:
            m.active = False
            await context.bot.send_message(chat_id, "üèÅ V√°n k·∫øt th√∫c (kh√¥ng ƒë·ªß ng∆∞·ªùi).")
            return
        m.turn_idx %= len(m.joined)
        await announce_turn(update, context, m)
        return

    # H·ª£p l·ªá -> chuy·ªÉn l∆∞·ª£t
    m.used.add(phrase)
    m.current_phrase = phrase
    m.turn_idx = (m.turn_idx + 1) % len(m.joined)
    await msg.reply_text("‚úÖ H·ª£p l·ªá. T·ªõi l∆∞·ª£t k·∫ø ti·∫øp!")
    await announce_turn(update, context, m)

# ======= APP FACTORY =======
def build_app() -> Application:
    # JobQueue s·∫Ω t·ª± b·∫≠t khi ƒë√£ c√†i g√≥i [job-queue] trong requirements.txt
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join", cmd_join))
    app.add_handler(CommandHandler("begin", cmd_begin))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app
