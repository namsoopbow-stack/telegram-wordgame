# bot.py
import os, re, random
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set, Tuple
from unidecode import unidecode

from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters,
)

# ================== C·∫§U H√åNH (ENV) ==================
TOKEN            = os.getenv("TELEGRAM_TOKEN", "").strip()
ROUND_SECONDS    = int(os.getenv("ROUND_SECONDS", "60"))     # 60s m·ªói l∆∞·ª£t
HALFTIME_SECONDS = int(os.getenv("HALFTIME_SECONDS", "30"))  # nh·∫Øc 30s
AUTO_BEGIN_AFTER = int(os.getenv("AUTO_BEGIN_AFTER", "60"))  # t·ª± b·∫Øt ƒë·∫ßu sau 60s
MIN_PLAYERS      = int(os.getenv("MIN_PLAYERS", "1"))        # ‚â•1 ng∆∞·ªùi l√† b·∫Øt ƒë·∫ßu
MIN_WORD_LEN     = int(os.getenv("MIN_WORD_LEN", "2"))       # m·ªói t·ª´ ‚â•2 k√Ω t·ª±
EXACT_WORDS      = 2                                         # b·∫Øt bu·ªôc ƒë√∫ng 2 t·ª´

# ================== TH√îNG ƒêI·ªÜP ==================
HALF_WARNINGS = [
    "C√≤n 30 gi√¢y cu·ªëi ƒë·ªÉ b·∫°n suy nghƒ© v·ªÅ cu·ªôc ƒë·ªùi:))",
    "T·∫Øc ·∫ª ƒë·∫øn v·∫≠y sao, 30 gi√¢y cu·ªëi n√® :||",
    "30 v·∫´n ch∆∞a ph·∫£i t·∫øt, nh∆∞ng mi s·∫Øp h·∫øt gi·ªù r·ªìi. 30 gi√¢y!",
    "M·∫Øc ƒë*tt r·∫∑n m√£i kh√¥ng ra? 30 gi√¢y cu·ªëi n√®!",
    "30 gi√¢y cu·ªëi n√≠ ∆°i!",
]
WRONG_REPLIES = [
    "IQ b·∫°n c·∫ßn ph·∫£i xem x√©t l·∫°i, m·ªùi ti·∫øp!!",
    "M·ªói th·∫ø c≈©ng sai, GG c≈©ng kh√¥ng c·ª©u ƒë∆∞·ª£c!",
    "Sai r·ªìi m√°, tra l·∫°i t·ª´ ƒëi·ªÉn ƒëi!",
    "T·ª´ g√¨ v·∫≠y m√°, h·ªçc l·∫°i l·ªõp 1 ƒëi!!",
    "·∫¢o ti·∫øng Vi·ªát hee.",
    "Lo·∫°i, ng∆∞·ªùi ti·∫øp theo!",
    "Ch∆∞a ti·∫øn ho√° h·∫øt √†, t·ª´ n√†y con ng∆∞·ªùi d√πng sao? Sai b√©t!!",
]
TIMEOUT_REPLY = "H·∫øt gi·ªù, m·ªùi b·∫°n ra ngo√†i ch·ªù!!"

# ================== T·ª™ ƒêI·ªÇN (CH·ªà D√ôNG PHRASES.TXT) ==================
BASE_DIR = os.path.dirname(__file__)
PHRASES_FP = os.path.join(BASE_DIR, "data", "phrases.txt")   # <-- file b·∫°n t·ª± l∆∞u

def _read_lines(path: str) -> List[str]:
    out = []
    try:
        with open(path, "r", encoding="utf-8") as f:
            for line in f:
                s = line.strip()
                if s and not s.startswith("#"):
                    out.append(s)
    except FileNotFoundError:
        # N·∫øu thi·∫øu file, ƒë·ªÉ r·ªóng -> m·ªçi c√¢u ƒë·ªÅu b·ªã sai (ƒë√∫ng y√™u c·∫ßu: ch·ªâ nh·∫≠n c·ª•m c√≥ trong t·ª´ ƒëi·ªÉn)
        pass
    return out

def normalize(s: str) -> str:
    # lower + b·ªè d·∫•u + gi·ªØ ch·ªØ/s·ªë/kho·∫£ng tr·∫Øng
    s = s.lower().replace("ƒë", "d")
    s = unidecode(s)
    s = re.sub(r"[^a-z0-9\s]", " ", s)
    s = re.sub(r"\s+", " ", s).strip()
    return s

# T·∫≠p c·ª•m 2 t·ª´ c√≥ nghƒ©a (chu·∫©n ho√° ƒë·ªÉ so kh·ªõp nhanh)
PHRASES: Set[str] = set(normalize(x) for x in _read_lines(PHRASES_FP))

# ================== H√ÄM V·∫¶N (rhyme) ==================
_VOWEL_KEY_RE = re.compile(r"[aeiouy]+[a-z]*$")   # l·∫•y c·ª•m nguy√™n √¢m + ph·ª• √¢m cu·ªëi

def last_word(text: str) -> str:
    toks = normalize(text).split()
    return toks[-1] if toks else ""

def rhyme_key(syllable: str) -> str:
    base = normalize(syllable)
    if not base:
        return ""
    m = _VOWEL_KEY_RE.search(base)
    return m.group(0) if m else (base[-2:] if len(base) >= 2 else base)

def same_rhyme(prev_phrase: Optional[str], new_phrase: str) -> bool:
    if not prev_phrase:
        return True  # l∆∞·ª£t ƒë·∫ßu ti√™n, kh√¥ng c·∫ßn so v·∫ßn
    return rhyme_key(last_word(prev_phrase)) == rhyme_key(last_word(new_phrase))

# ================== KI·ªÇM TRA LU·∫¨T ==================
def is_two_words(text: str) -> Tuple[bool, List[str]]:
    toks = normalize(text).split()
    if len(toks) != EXACT_WORDS:
        return False, toks
    if any(len(t) < MIN_WORD_LEN for t in toks):
        return False, toks
    return True, toks

def in_dictionary_two_word(text: str) -> bool:
    """Ch·ªâ ch·∫•p nh·∫≠n n·∫øu c·ª•m 2 t·ª´ n√†y c√≥ trong data/phrases.txt (ƒë√£ normalize)."""
    ok, toks = is_two_words(text)
    if not ok:
        return False
    norm = " ".join(toks)
    return norm in PHRASES

# ================== TR·∫†NG TH√ÅI V√ÅN ==================
@dataclass
class Match:
    chat_id: int
    lobby: Set[int] = field(default_factory=set)
    players: List[int] = field(default_factory=list)
    names: Dict[int, str] = field(default_factory=dict)
    active: bool = False
    turn_idx: int = 0
    current_phrase: Optional[str] = None
    halftime_job: Optional[str] = None
    timeout_job: Optional[str] = None
    autostart_job: Optional[str] = None

ROOMS: Dict[int, Match] = {}

def get_match(cid: int) -> Match:
    if cid not in ROOMS:
        ROOMS[cid] = Match(chat_id=cid)
    return ROOMS[cid]

# ================== H·∫∏N GI·ªú ==================
def jobname(kind: str, chat_id: int) -> str:
    return f"{kind}:{chat_id}"

async def cancel_job(context: ContextTypes.DEFAULT_TYPE, name: Optional[str]):
    if not name: return
    for j in context.application.job_queue.get_jobs_by_name(name):
        j.schedule_removal()

async def set_turn_timers(context: ContextTypes.DEFAULT_TYPE, m: Match):
    await cancel_job(context, m.halftime_job)
    await cancel_job(context, m.timeout_job)
    hname = jobname("half", m.chat_id)
    tname = jobname("timeout", m.chat_id)
    context.application.job_queue.run_once(half_notify, HALFTIME_SECONDS, name=hname, data=m.chat_id)
    context.application.job_queue.run_once(deadline_kick, ROUND_SECONDS,   name=tname, data=m.chat_id)
    m.halftime_job, m.timeout_job = hname, tname

async def half_notify(context: ContextTypes.DEFAULT_TYPE):
    cid = context.job.data
    m = ROOMS.get(cid)
    if not m or not m.active or not m.players: return
    uid = m.players[m.turn_idx]
    await context.bot.send_message(cid, f"‚è≥ {m.names.get(uid, 'B·∫°n')}: {random.choice(HALF_WARNINGS)}")

async def deadline_kick(context: ContextTypes.DEFAULT_TYPE):
    cid = context.job.data
    m = ROOMS.get(cid)
    if not m or not m.active or not m.players: return
    await context.bot.send_message(cid, f"‚è∞ {TIMEOUT_REPLY}")
    # lo·∫°i ng∆∞·ªùi t·ªõi l∆∞·ª£t
    if m.players:
        m.players.pop(m.turn_idx)
    if len(m.players) <= 1:
        await declare_winner(context, m); return
    m.turn_idx %= len(m.players)
    await announce_turn(context, m)

async def declare_winner(context: ContextTypes.DEFAULT_TYPE, m: Match):
    await cancel_job(context, m.halftime_job)
    await cancel_job(context, m.timeout_job)
    m.active = False
    if m.players:
        champ = m.players[0]
        await context.bot.send_message(m.chat_id, f"üèÜ {m.names.get(champ, 'ng∆∞·ªùi ch∆°i')} l√† ng∆∞·ªùi chi·∫øn th·∫Øng! Ch√∫c m·ª´ng!")
    m.current_phrase = None

# ================== TH√îNG B√ÅO L∆Ø·ª¢T ==================
async def announce_turn(context: ContextTypes.DEFAULT_TYPE, m: Match):
    uid = m.players[m.turn_idx]
    law = f"üîÅ Lu·∫≠t: ƒë√∫ng 2 t·ª´ ‚Ä¢ m·ªói t·ª´ ‚â•{MIN_WORD_LEN} k√Ω t·ª± ‚Ä¢ c·ª•m ph·∫£i c√≥ trong t·ª´ ƒëi·ªÉn ‚Ä¢ n·ªëi v·∫ßn theo t·ª´ cu·ªëi."
    prev = f"T·ª´ tr∆∞·ªõc: {m.current_phrase}" if m.current_phrase else "‚Üí G·ª≠i c·ª•m b·∫•t k·ª≥ (nh∆∞ng ph·∫£i c√≥ trong t·ª´ ƒëi·ªÉn)."
    await context.bot.send_message(m.chat_id, f"{law}\nüëâ {m.names.get(uid, 'B·∫°n')} ƒë·∫øn l∆∞·ª£t. {prev}")
    await set_turn_timers(context, m)

# ================== L·ªÜNH ==================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Ch√†o c·∫£ nh√†! /newgame ƒë·ªÉ m·ªü s·∫£nh, /join ƒë·ªÉ tham gia. "
        "N·∫øu kh√¥ng ai /begin, bot s·∫Ω t·ª± b·∫Øt ƒë·∫ßu sau 60s.\n"
        f"T·ª´ ƒëi·ªÉn hi·ªán c√≥: {len(PHRASES)} c·ª•m 2 t·ª´."
    )

async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat; user = update.effective_user
    m = get_match(chat.id)
    # reset
    m.lobby.clear(); m.players.clear(); m.active = False
    m.turn_idx = 0; m.current_phrase = None
    await cancel_job(context, m.autostart_job)
    await update.message.reply_text("üéÆ S·∫£nh m·ªü! /join ƒë·ªÉ tham gia. Kh√¥ng ai /begin th√¨ 60s n·ªØa t·ª± b·∫Øt ƒë·∫ßu.")
    # ng∆∞·ªùi t·∫°o auto-join
    m.lobby.add(user.id); m.names[user.id] = user.full_name
    await context.bot.send_message(chat.id, f"‚ûï {user.full_name} ƒë√£ tham gia!")
    # ƒë·∫∑t auto-begin
    aname = jobname("autobegin", chat.id)
    context.application.job_queue.run_once(auto_begin, AUTO_BEGIN_AFTER, name=aname, data=chat.id)
    m.autostart_job = aname

async def auto_begin(context: ContextTypes.DEFAULT_TYPE):
    cid = context.job.data
    m = ROOMS.get(cid)
    if not m or m.active: return
    if len(m.lobby) >= MIN_PLAYERS:
        await begin_game(context, m)
    else:
        await context.bot.send_message(cid, "‚è∏Ô∏è Kh√¥ng ƒë·ªß ng∆∞·ªùi ch∆°i. /newgame ƒë·ªÉ m·ªü l·∫°i s·∫£nh.")

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = get_match(update.effective_chat.id)
    uid = update.effective_user.id
    if uid not in m.lobby:
        m.lobby.add(uid); m.names[uid] = update.effective_user.full_name
        await update.message.reply_text("ƒê√£ tham gia!")

async def cmd_begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = get_match(update.effective_chat.id)
    await begin_game(context, m)

async def begin_game(context: ContextTypes.DEFAULT_TYPE, m: Match):
    if m.active: return
    if len(m.lobby) < MIN_PLAYERS:
        await context.bot.send_message(m.chat_id, "C·∫ßn th√™m ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu."); return
    m.players = list(m.lobby); random.shuffle(m.players)
    m.turn_idx = 0; m.active = True; m.current_phrase = None
    await context.bot.send_message(m.chat_id, "üöÄ B·∫Øt ƒë·∫ßu! Sai lu·∫≠t ho·∫∑c h·∫øt gi·ªù s·∫Ω b·ªã lo·∫°i.")
    await announce_turn(context, m)

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = get_match(update.effective_chat.id)
    m.active = False
    await cancel_job(context, m.halftime_job)
    await cancel_job(context, m.timeout_job)
    await update.message.reply_text("‚õî ƒê√£ d·ª´ng game.")

# ================== X·ª¨ L√ù VƒÇN B·∫¢N ==================
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text: return
    cid = update.effective_chat.id; uid = update.effective_user.id
    m = ROOMS.get(cid)
    if not m or not m.active or not m.players: return
    if uid != m.players[m.turn_idx]: return

    text = update.message.text.strip()

    # Lu·∫≠t: 2 t·ª´, c√≥ trong t·ª´ ƒëi·ªÉn, n·ªëi v·∫ßn
    ok, toks = is_two_words(text)
    if not ok or not in_dictionary_two_word(text) or not same_rhyme(m.current_phrase, text):
        await update.message.reply_text(f"‚ùå {random.choice(WRONG_REPLIES)}")
        # lo·∫°i ng∆∞·ªùi hi·ªán t·∫°i
        m.players.pop(m.turn_idx)
        if len(m.players) <= 1:
            await declare_winner(context, m); return
        m.turn_idx %= len(m.players)
        await announce_turn(context, m)
        return

    # H·ª£p l·ªá
    m.current_phrase = text
    await update.message.reply_text("‚úÖ H·ª£p l·ªá. T·ªõi l∆∞·ª£t k·∫ø ti·∫øp!")
    m.turn_idx = (m.turn_idx + 1) % len(m.players)
    await announce_turn(context, m)

# ================== APP ==================
def build_app() -> Application:
    if not TOKEN:
        raise RuntimeError("Thi·∫øu TELEGRAM_TOKEN (Environment > Add Variable)")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start",   cmd_start))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join",    cmd_join))
    app.add_handler(CommandHandler("begin",   cmd_begin))
    app.add_handler(CommandHandler("stop",    cmd_stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app
